# -*- coding: utf-8 -*-

import os
import xml.etree.ElementTree as ET

from qgis.core import Qgis
from qgis.core import QgsLayerTreeGroup

from qgis.PyQt.QtWidgets import QMessageBox
from qgis.utils import iface


from qgis.core import QgsProject
from qgis.core import QgsLineString
from qgis.core import QgsGeometry
from qgis.core import QgsPolygon
from qgis.core import QgsMultiPolygon
from qgis.core import QgsLayerTreeLayer
from qgis.core import QgsVectorLayer
from qgis.core import QgsField
from qgis.core import QgsFeature
from qgis.core import QgsPointXY
from qgis.core import QgsEditorWidgetSetup

from qgis.gui import QgisInterface

from qgis.PyQt.QtCore import QVariant
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.PyQt.QtWidgets import QInputDialog

from lxml import etree as ET
#from xml.etree import ElementTree as ET

from .common import logFile
from .common import log_msg
from .common import log_calls
from .common import category_map
from .common import purpose_map
from .common import code_map
from .common import parcel_field2path_dict
from .common import area_determination_map

class xmlUaLayers:
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è —è–∫—ñ —à–∞—Ä–∏ –±—É–¥–µ –º—ñ—Å—Ç–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ—á–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ xml
    # –ê —Ç–∞–∫–æ–∂ —à–∞—Ä–∏ —è–∫—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∞–ª–µ —Å–∞–º—ñ –Ω–µ –º–∞—é—Ç—å –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –≤–ª–∞—Å–Ω–∏–∫–∏, –æ—Ä–µ–Ω–¥–∞—Ä—ñ, –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∏, –°–∫–ª–∞–¥ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó

    # —Ñ–æ—Ä–º—É—é—Ç—å—Å—è –ü–æ–ª—è –¥–∞–Ω–∏—Ö, –∞–ª—ñ–∞—Å–∏ —Ç–∞ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —É –¥–æ–∫—É–º–µ–Ω—Ç—ñ xml
    # 
    


    # —Ü–µ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—É –≤—ñ–Ω –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –Ω–∞ 1 –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ
    # —ñ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º —Ñ–æ—Ä–º—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ–∂–Ω–æ–≥–æ
    # –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—É, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ xml
    _id_counter = 0
    
    def __init__(self, 
                xmlFilePath = "", 
                tree = None, 
                plugin=None):

        # xmlFilePath - –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –≥—Ä—É–ø–∏ —à–∞—Ä—ñ–≤
        # tree        - —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–µ –¥–µ—Ä–µ–≤–æ xml
        # plugin      _ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≥–µ–æ–º–µ—Ç—Ä—ñ—ó

        # __init__  –≤–∏–∫–ª–∏–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑ dockwidget.py:process_action_open
        # –æ–±–æ—Ö –≤–∏–∫–ª–∏–∫–∞—Ö tree —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–∏–π
        
        self.cleanup()

        self.plugin = plugin  

        xmlUaLayers._id_counter += 1

        # ‚ú® —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—É
        self.id = xmlUaLayers._id_counter

        # log_calls(logFile, f"–ù–æ–≤–∏–π xmlUaLayers –∑ id {str(self.id)}")

        # –î–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Ñ–æ—Ä–º –≤–≤–æ–¥—É –ø—Ä–∏ –≤—ñ–¥–º—ñ–Ω—ñ –≤–≤–µ–¥–µ–Ω–æ–≥–æ 
        # –∑–Ω–∞—á–µ–Ω–Ω—è -> –ø—Ä–æ–±–ª–µ–º–∞ –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å–ø–æ—Å–æ–±—É
        # –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –¥—ñ–ª—è–Ω–∫–∏ –Ω–∞ –ø–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –ú–°–ö
        # üö©
        self.block_attribute_handling = False

        # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–º—ñ–Ω–∏ –¥–∞–Ω–∏—Ö, —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–∏—Ö –∑ xml
        #‚úîÔ∏è 2025.04.19 –ø–æ–∫–∏ —Å–ø—ñ–ª—å–Ω–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç—É —ñ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó
        # üö©
        self.xml_data_changed = False

        # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ —à–∞—Ä—ñ–≤
        self.layer_colors = {}

        # —ñ–Ω—ñ—Ü—ñ—é—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ —à–∞—Ä—ñ–≤ QGIS
        self.layers = QgsProject.instance().mapLayers().values()

        # –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–µ–Ω—è –¥–µ—Ä–µ–≤–∞ —à–∞—Ä—ñ–≤
        self.layers_root = QgsProject.instance().layerTreeRoot()
        
        self.xmlFilePath: str = xmlFilePath
        self.plugin_dir = os.path.dirname(__file__)
        
        self.fileNameNoExt: str = os.path.splitext(os.path.basename(xmlFilePath))[0]

        # –≥–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è –≥—Ä—É–ø–∏ —à–∞—Ä—ñ–≤, –≤ —è–∫—É –±—É–¥—É—Ç—å –ø–æ–º—ñ—â–µ–Ω—ñ —à–∞—Ä–∏ xml  
        self.group_name = self.generate_group_name(self.fileNameNoExt)

        # –î–µ—Ä–µ–≤–æ xml
        self.tree = ET.parse(self.xmlFilePath)
        # –ö–æ—Ä—ñ–Ω—å –¥–µ—Ä–µ–≤–∞ xml
        self.root = self.tree.getroot()

        self.project = QgsProject.instance()
        self.crs = self.project.crs()
        self.crsEpsg = self.crs.authid()
        self.group = None
        self.xmlPoints: list = []
        self.qgisPoints: dict = {}
        self.qgisLines: dict = {}
        self.xmlLines: list = []
        self.ULIDs: list = []
        self.qgisLinesXML: dict = {}
        self.DMs: list = ['Survey','GPS','Digitization','Photogrammetry']
        self.added_layers = []

        self.create_group()

        self.read_points()
        self.read_lines()

        self.add_pickets()
        self.add_lines()

        self.add_zone()
        self.add_quartal()
        self.add_parcel()
        self.add_lands()
        self.add_leases()
        self.add_subleases()
        self.add_restrictions()

        self.add_adjacents()
    def generate_group_name(self, base_name):

        """
        –§–æ—Ä–º—É—î –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–∞–∑–æ–≤–æ—ó –Ω–∞–∑–≤–∏, –¥–æ–¥–∞—é—á–∏ —Å—É—Ñ—ñ–∫—Å, —è–∫—â–æ –≥—Ä—É–ø–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.
        """

        # log_calls(logFile, f"base_name = {base_name}")
        
        group_name = base_name

        existing_groups = [group.name() for group in self.layers_root.findGroups()]

        if group_name not in existing_groups:
            # log_calls(logFile, f"group_name = {group_name}")
            return group_name

        suffix = 1
        while f"{base_name}#{suffix}" in existing_groups:
            suffix += 1

        group_name = f"{base_name}#{suffix}"
        log_msg(logFile, f"group_name = {group_name}")
        return group_name

    def cleanup(self):
        """
        –û—á–∏—â—É—î —Ä–µ—Å—É—Ä—Å–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –µ–∫–∑–µ–º–ø–ª—è—Ä–æ–º,
        —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–ª–∞–≥—ñ–Ω–∞.
        """
        # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É–ø—É. –¶–µ —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–∏—Ç—å —É—Å—ñ –¥–æ—á—ñ—Ä–Ω—ñ –≤—É–∑–ª–∏ —à–∞—Ä—ñ–≤ –∑ –¥–µ—Ä–µ–≤–∞.
        # –®–∞—Ä–∏, —â–æ –±—É–ª–∏ –≤ –≥—Ä—É–ø—ñ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è –∑ –ø—Ä–æ–µ–∫—Ç—É.
        if hasattr(self, 'group') and self.group:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—É–∑–æ–ª –≤—Å–µ —â–µ —ñ—Å–Ω—É—î –≤ –¥–µ—Ä–µ–≤—ñ, –ø–µ—Ä—à –Ω—ñ–∂ –≤–∏–¥–∞–ª—è—Ç–∏
            if self.layers_root.findGroup(self.group.name()):
                 self.layers_root.removeChildNode(self.group)
            self.group = None

        # –û—á–∏—â—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ–¥–∞–Ω–∏—Ö —à–∞—Ä—ñ–≤, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω—ñ —Ä–∞–∑–æ–º –∑ –≥—Ä—É–ø–æ—é.
        if hasattr(self, 'added_layers'):
            self.added_layers = []
    def create_group(self):
        """
        Creates a group for XML layers, restricting renaming and subgroup addition.
        This method performs the following actions:
        - Creates a new group in the layer tree with the specified group name.
        - Sets the group to be read-only, preventing renaming or adding subgroups.
        - Updates the list of layers and the root of the layer tree.
        - Moves the newly created group to the top of the layer tree.
        Returns:
            None
        """
        # log_calls(logFile)
        self.group = self.layers_root.addGroup(self.group_name)
        cloned_group = self.group.clone()
        self.layers_root.removeChildNode(self.group)
        self.layers_root.insertChildNode(0, cloned_group)
        self.group = cloned_group

        # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∞—Ä—ñ–≤ —Ç–∞ –∫–æ—Ä–µ–Ω—è –¥–µ—Ä–µ–≤–∞ —à–∞—Ä—ñ–≤
        self.layers = QgsProject.instance().mapLayers().values()
        self.layers_root = QgsProject.instance().layerTreeRoot()

        return
    def read_points(self):
        """
        Imports points from an XML structure and stores them in two attributes: 
        `xmlPoints` and `qgisPoints`.
        The method processes each point found in the XML structure under the path 
        ".//PointInfo/Point".
        It extracts various attributes for each point, including 
        UIDP, PN, DeterminationMethod, X, Y, H, MX, MY, MH, and Description.
        These attributes are stored in a dictionary which is 
        appended to the `xmlPoints` list.
        Additionally, the method creates a `QgsPointXY` object for each point 
        using the X and Y coordinates and stores it in the `qgisPoints` dictionary 
        with UIDP as the key.

        Don't create any layer.
        
        Attributes:
            xmlPoints (list): A list of dictionaries, each containing point 
            attributes extracted from the XML.
            qgisPoints (dict): A dictionary mapping UIDP to `QgsPointXY` 
            objects representing the points.
        
        Returns:
            None
        """

        # log_calls(logFile)

        self.xmlPoints = []
        self.qgisPoints = {}

        for point in self.root.findall(".//PointInfo/Point"):
            uidp = point.find("UIDP").text if point.find("UIDP") is not None else None
            pn = point.find("PN").text if point.find("PN") is not None else None
            for DM in self.DMs:
                dm = point.find("DeterminationMethod/" + DM)
                if dm is None :
                    log_calls(logFile, " dmt: " + 'NoneType')
                    pass
                else:
                    dmt = dm.tag
                    # log_calls(logFile, " dmt: '" + dmt + "'")
                break
            x = point.find("X").text if point.find("X") is not None else None
            y = point.find("Y").text if point.find("Y") is not None else None
            h = point.find("H").text if point.find("H") is not None else None
            mx = point.find("MX").text if point.find("MX") is not None else None
            my = point.find("MY").text if point.find("MY") is not None else None
            mh = point.find("MH").text if point.find("MH") is not None else None
            description = point.find("Description").text if point.find("Description") is not None else None

            self.xmlPoints.append({
                "UIDP": uidp,
                "PN": pn,
                "DeterminationMethod": dmt,
                "X": x,
                "Y": y,
                "H": h,
                "MX": mx,
                "MY": my,
                "MH": mh,
                "Description": description
            })


            self.qgisPoints[uidp] = QgsPointXY(float(x), float(y))

        # log_calls(logFile, "xmlPoints")
        # log_calls(logFile, "qgisPoints")

        return
    def add_pickets(self):
        """
        Imports picket points from XML data and adds them as a new layer to the QGIS project.
        Ensures the layer "–ü—ñ–∫–µ—Ç–∏" is added only once to the specified group.
        """
        # log_calls(logFile)
        layer_name = "–ü—ñ–∫–µ—Ç–∏"

        # Check if layer already exists in the group
        group = self.layers_root.findGroup(self.group_name)
        existing_layer = None
        if group:
            for child in group.children():
                if isinstance(child, QgsLayerTreeLayer) and child.name() == layer_name:
                    existing_layer = child.layer()
                    break

        if existing_layer:
            log_msg(logFile, f"–®–∞—Ä '{layer_name}' –≤–∂–µ —ñ—Å–Ω—É—î –≤ –≥—Ä—É–ø—ñ '{self.group_name}'.")
            return  # Layer already exists in the group; do nothing

        self.removeLayer(layer_name)  # Remove from root if it's there

        layer = QgsVectorLayer("Point?crs=" + self.crsEpsg, layer_name, "memory")

        if layer.isValid():
            layer.loadNamedStyle(os.path.dirname(__file__) + "/templates/points.qml")
            QgsProject.instance().addMapLayer(layer, False)  # Add to project, but not to tree yet


            if group is None: # ensure group exist
                group = self.layers_root.addGroup(self.group_name)
            
            layer_node = group.addLayer(layer) # Add directly to the group only once
            self.added_layers.append(layer_node)

        else:
            QMessageBox.critical(self, "xml_ua", "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —à–∞—Ä—É —Ç–æ—á–æ–∫.")
            return

        provider = layer.dataProvider()

        provider.addAttributes([
            QgsField("UIDP", QVariant.String),
            QgsField("PN", QVariant.String),
            QgsField("H", QVariant.String),
            QgsField("MX", QVariant.String),
            QgsField("MY", QVariant.String),
            QgsField("MH", QVariant.String),
            QgsField("Description", QVariant.String)])
        layer.updateFields()

        for xmlPoint in self.xmlPoints:
            feature = QgsFeature()
            feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(xmlPoint["Y"]), float(xmlPoint["X"]))))
            feature.setAttributes([
                xmlPoint["UIDP"],
                xmlPoint["PN"],
                xmlPoint["H"],
                xmlPoint["MX"],
                xmlPoint["MY"],
                xmlPoint["MH"],
                xmlPoint["Description"]])
            provider.addFeature(feature)

        return
    def read_lines(self):
        """

        The method read_lines is defined but not called anywhere in the class. 

        :return: None
        :rtype: None
        """

        # log_calls(logFile)

        self.qgisLines = {}
        self.xmlLines = []

        logstr = ''
        for line in self.root.findall(".//PL"):

            ulid = line.find("ULID").text
            if ulid is None: continue
            points_uidp = [p.text for p in line.findall(".//P")]
            logstr += '\n\t "' + ulid + '" ' + str(points_uidp)

            length = line.find("Length").text if line.find("Length") is not None else None
            self.xmlLines.append({
                "ULID": ulid,
                "Points": points_uidp,
                "Length": length
            })

            self.qgisLines[ulid] = [self.qgisPoints[uidp] for uidp in points_uidp ]

        # log_msg(logFile, "\n    ULID [Point list]:" + logstr )

        return
    def add_zone(self):
        """
        Imports zones from the XML file and adds them as a new layer to the QGIS project,
        ensuring the layer is added only once and at the top of the specified group.
        If the layer already exists, it's removed and recreated.
        """        
        
        # log_calls(logFile)
        layer_name = "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞ –∑–æ–Ω–∞"

        # Check if the layer already exists in the group
        group = self.layers_root.findGroup(self.group_name)  # Corrected to use findGroup
        if group is None:
            group = self.layers_root.addGroup(self.group_name)
            log_calls(logFile, f"–ì—Ä—É–ø–∞ '{self.group_name}' —Å—Ç–≤–æ—Ä–µ–Ω–∞.")
        else:
            # log_calls(logFile, f"–ì—Ä—É–ø–∞ '{self.group_name}' –∑–Ω–∞–π–¥–µ–Ω–∞.")
            pass

        # Check if the layer already exists in the group
        existing_layer = None

        for child in group.children():
            if isinstance(child, QgsLayerTreeLayer) and child.name() == layer_name:
                existing_layer = child.layer()
                break

        # log_calls(logFile, f"existing_layer = {existing_layer}")
        # log_calls(logFile, f"self.group_name = {self.group_name}")

        # Remove the existing layer if found
        if existing_layer:
            self.removeLayer(layer_name, self.group_name) # remove existing layer from group



        layer = QgsVectorLayer("MultiPolygon?crs=" + self.crsEpsg, layer_name, "memory")
        layer.loadNamedStyle(os.path.dirname(__file__) + "/templates/zone.qml")
        # log_calls(logFile, f"layer = {layer}")


        if not layer.isValid():
            QMessageBox.critical(self, "xml_ua", "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —à–∞—Ä—É –∑–æ–Ω.")
            return

        layer_provider = layer.dataProvider()
        layer_provider.addAttributes([
            QgsField("CadastralZoneNumber", QVariant.String)
        ])
        layer.updateFields()

        zone_ne = self.root.find(".//CadastralZoneInfo/CadastralZoneNumber")
        zone_id = zone_ne.text if zone_ne is not None else None  # Handle potential missing element

        for zone in self.root.findall(".//CadastralZoneInfo"):
            externals_element = zone.find(".//Externals/Boundary/Lines")
            external_coords = self.linesToCoordinates(externals_element) if externals_element is not None else []

            internals_element = zone.find(".//Internals/Boundary/Lines")
            internal_coords_list = [self.linesToCoordinates(internals_element)] if internals_element is not None else []

            polygon = self.coordToPolygon(external_coords)
            for internal_coords in internal_coords_list:
                polygon.addInteriorRing(internal_coords)

            feature = QgsFeature()
            feature.setGeometry(QgsGeometry(polygon))
            feature.setAttributes([zone_id])
            layer_provider.addFeature(feature)

        # root.addLayer(layer)  # No need for addMapLayer anymore

        # Add the layer to the project but *not* directly to the layer tree:
        QgsProject.instance().addMapLayer(layer, False) 


        # # Move the layer to the top of its group (after adding it to the root)        
        # root = QgsProject.instance().layerTreeRoot()
        # tree_layer = root.findLayer(layer.id())  # Retrieve the tree layer
        # if tree_layer:
        #     group.insertChildNode(0, tree_layer) # Now insert it at the top
        # else:
        #     log_msg(logFile, f"Error: Could not find tree layer for '{layer_name}'")

        # # Ensure the group exists:

        # log_calls(logFile, f"group = {group}")
        if group is None:
            group = self.layers_root.addGroup(self.group_name)

        # # Add the layer *only* to the group:
        layer_node = group.addLayer(layer)  # Use addLayer directly on the group

        self.last_to_first(group)

        self.added_layers.append(layer_node)
        return
    def last_to_first(self, group):
        """Moves the last child node of a layer tree group to the first position."""
        if group is None:
            return

        children = group.children()  # Get the list of children
        child_count = len(children)  # Get the number of children

        if child_count < 2:
            return

        last_child = children[-1]  # Access the last child using negative indexing
        cloned_last_child = last_child.clone()

        group.insertChildNode(0, cloned_last_child)
        group.removeChildNode(last_child)
    def linesToCoordinates(self, lines_element):
        """ –§–æ—Ä–º—É—î —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–º–∫–Ω–µ–Ω–æ–≥–æ –ø–æ–ª—ñ–≥–æ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ ULID –ª—ñ–Ω—ñ–π 
            —ñ —ó—Ö —Ç–æ—á–æ–∫.

            Parameters:
                lines_element (xml.etree.ElementTree.Element): 

            Returns:
                list: –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–º–∫–Ω–µ–Ω–æ–≥–æ –ø–æ–ª—ñ–≥–æ–Ω—É.
        """

        # log_calls(logFile)
        
        if lines_element is None:
            raise ValueError("lines_element –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ None.")

        # –ó—á–∏—Ç–∞—Ç–∏ –≤—Å—ñ ULID –ª—ñ–Ω—ñ–π
        lines = []

        logstr = ''
        i = 0
        for line in lines_element.findall(".//Line"):
            i += 1
            ulid = line.find("ULID").text
            # logstr += '\n\t' + ulid + '. '+ str(line)
            logstr += '\n\t' + ulid + '. '

            if ulid and ulid in self.qgisLines:
                lines.append((ulid, self.qgisLines[ulid]))
            elif ulid:
                raise ValueError(f"ULID '{ulid}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")
            else:
                raise ValueError("–õ—ñ–Ω—ñ—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—É —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞.")
        # log_calls(logFile, "\n\t   ULID:" + logstr)

        # –§–æ—Ä–º—É—î–º–æ –∑–∞–º–∫–Ω–µ–Ω–∏–π –ø–æ–ª—ñ–≥–æ–Ω
        if not lines:
            return []

        polygon_coordinates = []
        used_lines = set()
        current_line = lines[0]
        polygon_coordinates.extend(current_line[1])  # –î–æ–¥–∞—Ç–∏ —Ç–æ—á–∫–∏ –ø–µ—Ä—à–æ—ó –ª—ñ–Ω—ñ—ó
        used_lines.add(current_line[0])

        while len(used_lines) < len(lines):
            # –ü–æ—à—É–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ª—ñ–Ω—ñ—ó, —â–æ –∑'—î–¥–Ω—É—î—Ç—å—Å—è
            for ulid, coords in lines:
                if ulid in used_lines:
                    continue
                if coords[0] == polygon_coordinates[-1]:  # –ó'—î–¥–Ω–∞–Ω–Ω—è –∫—ñ–Ω—Ü—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –ª—ñ–Ω—ñ—ó –∑ –ø–æ—á–∞—Ç–∫–æ–º –Ω–∞—Å—Ç—É–ø–Ω–æ—ó
                    polygon_coordinates.extend(coords[1:])
                    used_lines.add(ulid)
                    break
                elif coords[-1] == polygon_coordinates[-1]:  # –ó'—î–¥–Ω–∞–Ω–Ω—è –∫—ñ–Ω—Ü—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –ª—ñ–Ω—ñ—ó –∑ –∫—ñ–Ω—Ü–µ–º –Ω–∞—Å—Ç—É–ø–Ω–æ—ó
                    polygon_coordinates.extend(reversed(coords[:-1]))
                    used_lines.add(ulid)
                    break
            else:
                raise ValueError("–ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–∞–º–∫–Ω–µ–Ω–∏–π –ø–æ–ª—ñ–≥–æ–Ω ‚Äî –¥–µ—è–∫—ñ –ª—ñ–Ω—ñ—ó –Ω–µ –∑'—î–¥–Ω—É—é—Ç—å—Å—è.")

        # –ó–∞–º–∏–∫–∞–Ω–Ω—è –ø–æ–ª—ñ–≥–æ–Ω—É
        if polygon_coordinates[0] != polygon_coordinates[-1]:
            polygon_coordinates.append(polygon_coordinates[0])

        return polygon_coordinates
    def coordToPolygon(self, coordinates):
        """
        –§–æ—Ä–º—É—î –ø–æ–ª—ñ–≥–æ–Ω —ñ–∑ –∑–∞–¥–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
        """

        # log_calls(logFile)

        logstr = ''
        i = 0
        for point in coordinates:
            i += 1
            logstr += f"\n\t {str(i)}. {point.x():.2f}, {point.y():.2f}"
        # log_calls(logFile, "\n\tcoordinates: " + logstr)

        line_string = QgsLineString([QgsPointXY(y, x) for x, y in coordinates])

        polygon = QgsPolygon()
        polygon.setExteriorRing(line_string)  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∫—ñ–ª—å—Ü—è
        return polygon


    def add_parcel(self):
        # –¢—É—Ç —Ñ–æ–º—É—î—Ç—å—Å—è —à–∞—Ä –î—ñ–ª—è–Ω–∫–∞, –¥–æ–¥–∞—î—Ç—å—Å—è —É –≥—Ä—É–ø—É
        # –¢—É—Ç –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –∑ xml –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–∞–Ω—ñ –ø—Ä–æ –¥—ñ–ª—è–Ω–∫—É
        # –î–∞—é—Ç—å—Å—è –Ω–∞–∑–≤–∏ –ø–æ–ª—è–º —ñ —ó—Ö –∞–ª—ñ–∞—Å–∞–º, –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è —ó—Ö –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Xml


        # –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∑–¥—ñ–ª—ñ–≤ ParcelInfo
        # —è–∫—â–æ —ó—Ö –∫—ñ–ª—å–∫–∞ - –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ —è–∫–∏–π—Å—å –æ–¥–∏–Ω
        # —ó—Ö –º–∞—î –±—É—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω, —è–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç XML –æ–ø–∏—Å—É—î –æ–¥–Ω—É —Ç–µ—Ö–Ω—ñ—á–Ω—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é
        # –±–æ —Ä–æ–∑–¥—ñ–ª TechnicalDocumentationInfo —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–æ–º ParcelInfo
        parcel_infos = self.root.findall(".//Parcels/ParcelInfo")
        
        if len(parcel_infos) == 0:
            log_msg(logFile, "–£ {self.xmlFilePath} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç ParcelInfo")
            return False
        else:
            log_msg(logFile, f"–£ {self.xmlFilePath} –∑–Ω–∞–π–¥–µ–Ω–æ {len(parcel_infos)} —Ä–æ–∑–¥—ñ–ª—ñ–≤ ParcelInfo. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–µ—Ä—à–∏–π.")
            # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
            # –ê–ª–µ –ø–æ–∫–∏ —â–æ –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π
            parcel_info = parcel_infos[0]
            metric_info = parcel_info.find("ParcelMetricInfo")
            if metric_info is None:
                log_msg(logFile, "–í—ñ–¥—Å—É—Ç–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç ParcelMetricInfo —É –ø–µ—Ä—à–æ–º—É ParcelInfo")
                return False

        layer = QgsVectorLayer("MultiPolygon?crs=" + self.crsEpsg, "–î—ñ–ª—è–Ω–∫–∞", "memory")
        # –ù–∞–∫–ª–∞–¥–∞–Ω–Ω—è —Å—Ç–∏–ª—é QML
        layer.loadNamedStyle(os.path.dirname(__file__) + "/templates/parcel.qml")
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–∏—Ö —à–∞—Ä—É
        layer_provider = layer.dataProvider()
        # regionüìå –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ QGIS-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        # –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤ —à–∞—Ä—É –î—ñ–ª—è–Ω–∫–∞
        def on_attributes_committed(feature_ids):
            """
            –û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—É committedAttributesChanged.

            Args:
                feature_ids: –°–ø–∏—Å–æ–∫ ID —Ñ—ñ—á, –∞—Ç—Ä–∏–±—É—Ç–∏ —è–∫–∏—Ö –±—É–ª–∏ –∑–º—ñ–Ω–µ–Ω—ñ.
            """
            log_calls(logFile, f"–ó–º—ñ–Ω–µ–Ω–æ –∞—Ç—Ä–∏–±—É—Ç–∏ —Ñ—ñ—á –∑ ID {feature_ids}.")
            self.layer_modified = True
            QMessageBox.information(None, "xml_ua", f"–ó–º—ñ–Ω–µ–Ω–æ –∞—Ç—Ä–∏–±—É—Ç–∏ —Ñ—ñ—á –∑ ID {feature_ids}.")    

            # –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–æ–¥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ XML —É —Ñ–∞–π–ª.
            # –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
            # save_xml_tree_to_file(self.xml_tree, self.xml_file_path)
        def on_feature_added(feature):
            """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—É –ø—Ä–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤."""
            self.layer_modified = True
            self.show_message("on_features_added", f"–î–æ–¥–∞–Ω–æ –æ–±'—î–∫—Ç–∏: {feature}")
        def on_feature_deleted(feature):
            """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—É –ø—Ä–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤."""
            self.layer_modified = True
            self.show_message("on_features_deleted", f"–í–∏–¥–∞–ª–µ–Ω–æ –æ–±'—î–∫—Ç–∏ –∑ ID: {feature}")
        def on_geometry_changed(feature_id, geometry):
            """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—É –ø—Ä–æ –∑–º—ñ–Ω—É –≥–µ–æ–º–µ—Ç—Ä—ñ—ó –æ–±'—î–∫—Ç–∞."""
            self.layer_modified = True
            self.show_message("on_geometry_changed", f"–ì–µ–æ–º–µ—Ç—Ä—ñ—é –æ–±'—î–∫—Ç–∞ –∑ ID {feature_id} –∑–º—ñ–Ω–µ–Ω–æ.")
        # –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤ —à–∞—Ä—É
        #‚úîÔ∏è 2025.05.19 editingStopped
        layer.editingStopped.connect(self.on_editing_stopped)
        layer.featureAdded.connect(on_feature_added)
        layer.featureDeleted.connect(on_feature_deleted)
        # layer.geometryChanged.connect(on_geometry_changed)
        # endregion
        
        # regionüìå –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ —Ñ–æ—Ä–º–∏ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ –î—ñ–ª—è–Ω–∫–∏
        # –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª layer –ø—Ä–æ –∑–º—ñ–Ω—É –π–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ 
        # —Å–∏–≥–Ω–∞–ª —à–∞—Ä—É –º—ñ—Å—Ç–∏—Ç—å –ª–∏—à–µ id —Ñ–æ—Ä–º–∏, id –ø–æ–ª—è, –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        # —Å–∏–≥–Ω–∞–ª —à–∞—Ä—É –ù–ï –º—ñ—Å—Ç–∏—Ç—å –ù–ê–í–Ü–¢–¨ –æ–±'—î–∫—Ç layer‚ú®
        # —Å–∏–≥–Ω–∞–ª –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è —É –∫–æ–¥—ñ –∫–ª–∞—Å—É ->
        # —ñ –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞—î –∫–æ–∂–µ–Ω‚ú® –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É —É –∫—É–ø—ñ
        # –ù–µ –º–æ–∂–ª–∏–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —É –∫–æ–¥—ñ —É —è–∫–æ–º—É –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ xmlUaLayers
        # —Å—Ç–≤–æ—Ä–µ–Ω–æ layer, –±–æ –æ—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É self.id == self.id 
        # –¢–æ–º—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ layer(parcel) —ñ self.id(xmlUaLayers)  
        # 1) "–∑–∞–º–æ—Ä–æ–∂—É—î–º–æ" self.id xmlUaLayers:
        layer.setCustomProperty("xml_layer_id", self.id)
        # 2) –≤–Ω–æ—Å–∏–º–æ layer —É –∫–æ–Ω—Ç–µ–∫—Å—Ç (__closure__) Œª 
        # 3) –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —É —è–∫–æ—Å—Ç—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –Ω–µ —Å–∞–º –æ–±—Ä–æ–±–Ω–∏–∫ –∞ Œª: 
        layer.attributeValueChanged.connect(lambda fid, idx, val, l=layer: self.handle_parcel_attribute_change(l, fid, idx, val))
        # endregion
        # endregion
        # regionüìå –û–ø–∏—Å –ø–æ–ª—ñ–≤ —à–∞—Ä—É –î—ñ–ª—è–Ω–∫–∞
        fields = [
            # 1 
            QgsField("ParcelID", QVariant.String),
            # 2
            QgsField("Description", QVariant.String),
            # 3
            QgsField("AreaSize", QVariant.Double),
            # 4
            QgsField("AreaUnit", QVariant.String),
            # 5
            QgsField("DeterminationMethod", QVariant.String),
            # 6
            QgsField("Region", QVariant.String),
            # 7
            QgsField("Settlement", QVariant.String),
            # 8
            QgsField("District", QVariant.String),
            # 9
            QgsField("ParcelLocation", QVariant.String),
            # 10
            QgsField("StreetType", QVariant.String),
            # 11
            QgsField("StreetName", QVariant.String),
            # 12
            QgsField("Building", QVariant.String),
            # 13
            QgsField("Block", QVariant.String),
            # 14
            QgsField("AdditionalInfo", QVariant.String),
            # 15 –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–µ–º–µ–ª—å
            QgsField("Category", QVariant.String),
            # 16 –¶—ñ–ª—å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è) –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏
            QgsField("Purpose", QVariant.String),
            # 17 –¶—ñ–ª—å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è) –∑–≥—ñ–¥–Ω–æ —ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
            QgsField("Use", QVariant.String),
            # 18 –ö–æ–¥ –§–æ—Ä–º–∞ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –Ω–∞ –∑–µ–º–µ–ª—å–Ω—É –¥—ñ–ª—è–Ω–∫—É
            QgsField("Code", QVariant.String),
        ]
        # endregion
        # regionüìå –ü—Å–µ–≤–¥–æ–Ω—ñ–º–∏ –ø–æ–ª—ñ–≤ —à–∞—Ä—É –î—ñ–ª—è–Ω–∫–∞
        aliases = {
            # 1
            "ParcelID": "–ù–æ–º–µ—Ä –¥—ñ–ª—è–Ω–∫–∏",
            # 2
            "Description": "–û–ø–∏—Å",
            # 3
            "AreaSize": "–ü–ª–æ—â–∞",
            # 4
            "AreaUnit": "–û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É",
            # 5
            "DeterminationMethod": "–°–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ",
            # 6
            "Region": "–†–µ–≥—ñ–æ–Ω",
            # 7
            "Settlement": "–ù–∞–∑–≤–∞ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É",
            # 8
            "District": "–ù–∞–∑–≤–∞ —Ä–∞–π–æ–Ω—É",
            # 9
            "ParcelLocation": "–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É",
            # 10
            "StreetType": "–¢–∏–ø (–≤—É–ª–∏—Ü—è, –ø—Ä–æ—Å–ø–µ–∫—Ç, –ø—Ä–æ–≤—É–ª–æ–∫ —Ç–æ—â–æ)",
            # 11
            "StreetName": "–ù–∞–∑–≤–∞ –≤—É–ª–∏—Ü—ñ",
            # 12
            "Building": "–ù–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É",
            # 13
            "Block": "–ù–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å—É",
            # 14
            "AdditionalInfo": "–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
            # 15
            "Category": "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–µ–º–µ–ª—å",
            # 16
            "Purpose": "–¶—ñ–ª—å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)",
            # 17
            "Use": "–¶—ñ–ª—å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–≥—ñ–¥–Ω–æ —ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º",
            # 18
            "Code": "–ö–æ–¥ —Ñ–æ—Ä–º–∏ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ",
        }
        # endregion
        # regionüìå –î–æ–¥–∞—î–º–æ –ø–æ–ª—è —ñ –ø—Å–µ–≤–¥–æ–Ω—ñ–º–∏ –¥–æ —à–∞—Ä—É
        layer_provider.addAttributes(fields)
        layer.updateFields()

        if len(fields) == len(aliases):
            for field_name, alias in aliases.items():
                # log_msg(logFile, f"{layer.fields().indexOf(field_name)}. {field_name}, {alias}")
                layer.setFieldAlias(layer.fields().indexOf(field_name), alias)
        else:
            log_msg(logFile, "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ª—ñ–≤ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Å–µ–≤–¥–æ–Ω—ñ–º—ñ–≤.")
        # endregion
        # regionüìå –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–µ–º–µ–ª—å
        index = layer.fields().indexOf("Category")
        if (index >= 0):
            setup = QgsEditorWidgetSetup("ValueMap", {
                "map": category_map,
                "UseMap": "true"
            })
            layer.setEditorWidgetSetup(index, setup)
        # endregion
        # regionüìå –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è —Ü—ñ–ª—å–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        index = layer.fields().indexOf("Purpose")
        if (index >= 0):
            setup = QgsEditorWidgetSetup("ValueMap", {
                "map": purpose_map,
                "UseMap": "true"
            })
            layer.setEditorWidgetSetup(index, setup)
        # endregion
        # regionüìå –ö–æ–º–±–æ–±–æ–∫—Å –ö–æ–¥—É —Ñ–æ—Ä–º–∏ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ
        index = layer.fields().indexOf("Code")
        if (index >= 0):
            setup = QgsEditorWidgetSetup("ValueMap", {
                "map": code_map,
                "UseMap": "true"
            })
            layer.setEditorWidgetSetup(index, setup)
        # endregion
        # regionüìå –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
        parcel_id = metric_info.findtext("ParcelID", "")
        description = metric_info.findtext("Description", "")
        area_size = metric_info.findtext("Area/Size", "")
        area_unit = metric_info.findtext("Area/MeasurementUnit", "")
        # region –ú–µ—Ç–æ–¥ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ:
        # area_method <--> <DeterminationMethod>
        # –ú–µ—Ç–æ–¥ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —É xml:
        # 1)<ExhangeFileCoordinates></ExhangeFileCoordinates>, 2)<DocExch></DocExch>, 
        # 3)<Calculation>
        #   <CoordinateSystem>
        #       –í–∞—Ä—ñ–∞–Ω—Ç–∏:
        #       1. <SC42></SC42>, 
        #       2. <SC42_3></SC42_3>, 
        #       3. <Local>–ú–°–ö –•–•</Local>,
        #       4. <USC2000></USC2000>,
        #       5. <WGS84></WGS84>,
        #       6. <SC63>
        #               <X></X>
        #               <C></C>
        #               <P></P>
        #               <T></T>
        #          </SC63>
        #   </CoordinateSystem>
        # </Calculation>
        # 
        def get_determination_method_label(self):
            from .common import area_determination_map  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç—É—Ç –∞–±–æ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –º–æ–¥—É–ª—è

            det_elem = self.root.find(".//ParcelMetricInfo/Area/DeterminationMethod")
            if det_elem is None or not len(det_elem):
                return ""

            # –Ø–∫—â–æ —î <ExchangeFileCoordinates/>
            if det_elem.find("ExchangeFileCoordinates") is not None:
                return area_determination_map.get("<ExhangeFileCoordinates/>", "–ó–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –æ–±–º—ñ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª—É")

            # –Ø–∫—â–æ —î <DocExch/>
            if det_elem.find("DocExch") is not None:
                return area_determination_map.get("<DocExch/>", "–ó–≥—ñ–¥–Ω–æ —ñ–∑ –ø—Ä–∞–≤–æ–≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞–ª—å–Ω–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")

            # –Ø–∫—â–æ —î <Calculation>/<CoordinateSystem>
            calculation = det_elem.find("Calculation/CoordinateSystem")
            if calculation is not None:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                if calculation.find("SC42") is not None:
                    return area_determination_map.get("<Calculation><CoordinateSystem><SC42/></CoordinateSystem></Calculation>", "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ '–°–ö-42' (6 –≥—Ä–∞–¥ –∑–æ–Ω–∞)")
                if calculation.find("SC42_3") is not None:
                    return area_determination_map.get("<Calculation><CoordinateSystem><SC42_3/></CoordinateSystem></Calculation>", "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ '–°–ö-42' (3 –≥—Ä–∞–¥ –∑–æ–Ω–∞)")
                if calculation.find("USC2000") is not None:
                    return area_determination_map.get("<Calculation><CoordinateSystem><USC2000/></CoordinateSystem></Calculation>", "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ '–£–°–ö2000'")
                if calculation.find("WGS84") is not None:
                    return area_determination_map.get("<Calculation><CoordinateSystem><WGS84/></CoordinateSystem></Calculation>", "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'WGS84'")
                if calculation.find("Local") is not None:
                    msk_text = calculation.findtext("Local", "").strip()
                    return f"–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –º—ñ—Å—Ü–µ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç '{msk_text}'"
                if calculation.find("SC63") is not None:
                    sc63 = calculation.find("SC63")
                    # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–µ–≥ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ SC63
                    if sc63.find("X") is not None:
                        return area_determination_map.get("<Calculation><CoordinateSystem><SC63><X/></SC63></CoordinateSystem></Calculation>", "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63-X'")
                    if sc63.find("C") is not None:
                        return area_determination_map.get("<Calculation><CoordinateSystem><SC63><C/></SC63></CoordinateSystem></Calculation>", "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63-C'")
                    if sc63.find("P") is not None:
                        return area_determination_map.get("<Calculation><CoordinateSystem><SC63><P/></SC63></CoordinateSystem></Calculation>", "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63-P'")
                    if sc63.find("T") is not None:
                        return area_determination_map.get("<Calculation><CoordinateSystem><SC63><T/></SC63></CoordinateSystem></Calculation>", "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63-T'")

            return "–ù–µ–≤—ñ–¥–æ–º–æ"
        area_method = get_determination_method_label(self)
        # log_msg(logFile, f"–ú–µ—Ç–æ–¥ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ = {area_method}")
        # QMessageBox.information(None, "label", label)


        ns = ""
        # endregion area_method = ... (–ú–µ—Ç–æ–¥ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ)
        # region –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –ú–µ—Ç–æ–¥—É –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ
        # –°–ø–∏—Å–æ–∫ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–∞
        determination_variants = [
            "–ó–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –æ–±–º—ñ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª—É",
            "–ó–≥—ñ–¥–Ω–æ —ñ–∑ –ø—Ä–∞–≤–æ–≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞–ª—å–Ω–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º",
            "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ '–°–ö-42' (6 –≥—Ä–∞–¥ –∑–æ–Ω–∞)",
            "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ '–°–ö-42' (3 –≥—Ä–∞–¥ –∑–æ–Ω–∞)",
            "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ '–£–°–ö2000'",
            "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'WGS84'",
            "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63-X'",
            "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63-C'",
            "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63-P'",
            "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63-T'",
            # –û–∫—Ä–µ–º–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
            "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –º—ñ—Å—Ü–µ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"  
        ]
        # –°—Ç–≤–æ—Ä—é—î–º–æ ValueMap (–Ω–∞–∑–≤–∞ ‚Üí –∫–æ–¥)
        value_map = {v: v for v in determination_variants}

        index = layer.fields().indexOf("DeterminationMethod")
        if index != -1:
            setup = QgsEditorWidgetSetup("ValueMap", {"map": value_map, "UseMap": "true"})
            layer.setEditorWidgetSetup(index, setup)
        # endregion –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –ú–µ—Ç–æ–¥—É –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ 
        region = metric_info.findtext("../ParcelLocationInfo/Region", "")
        settlement = metric_info.findtext("../ParcelLocationInfo/Settlement", "")
        district = metric_info.findtext("../ParcelLocationInfo/District", "")
        # parcel_location: –í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É
        # –µ–ª–µ–º–µ–Ω—Ç ParcelLocationInfo/ParcelLocation –º–æ–∂–µ –º–∞—Ç–∏ –æ–¥–∏–Ω –∑ –¥–≤–æ—Ö
        # –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: <Rural></Rural> –∞–±–æ <Urban></Urban>
        # –Ω–∞–ø–∏—à–∏ –∫–æ–¥, —è–∫–∏–π –ø—Ä–∏—Å–≤–æ—ó—Ç—å parcel_location –∑–Ω–∞—á–µ–Ω–Ω—è
        # "–ó–∞ –º–µ–∂–∞–º–∏ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É" —É –ø–µ—Ä—à–æ–º—É –≤–∏–ø–∞–¥–∫—É —ñ
        # "–£ –º–µ–∂–∞—Ö –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É" —É –¥—Ä—É–≥–æ–º—É
        location_info = parcel_info.find("ParcelLocationInfo/ParcelLocation", ns)
        parcel_location = ""
        if location_info is not None:
            if location_info.find("Rural", ns) is not None:
                parcel_location = "–ó–∞ –º–µ–∂–∞–º–∏ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É"
            elif location_info.find("Urban", ns) is not None:
                parcel_location = "–£ –º–µ–∂–∞—Ö –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É"
        street_type = location_info.findtext("../ParcelAddress/StreetType", "")
        street_name = location_info.findtext("../ParcelAddress/StreetName", "")
        building = location_info.findtext("../ParcelAddress/Building", "")
        block = location_info.findtext("../ParcelAddress/Block", "")
        additional_info = location_info.findtext("../AdditionalInfoBlock/AdditionalInfo", "")
        category = parcel_info.findtext("CategoryPurposeInfo/Category", "")
        purpose = parcel_info.findtext("CategoryPurposeInfo/Purpose", "")
        use = parcel_info.findtext("CategoryPurposeInfo/Use", "")
        code = parcel_info.findtext("OwnershipInfo/Code", "")




        # endregion        
        # regionüìå –ó–æ–≤–Ω—ñ—à–Ω—ñ –º–µ–∂—ñ
        externals_element = metric_info.find(".//Externals/Boundary/Lines")
        if externals_element is not None:
            external_coords = self.linesToCoordinates(externals_element)
        else:
            external_coords = []

        internals_element = metric_info.find(".//Internals/Boundary/Lines")
        internal_coords_list = []
        if internals_element is not None:
            internal_coords_list.append(self.linesToCoordinates(internals_element))

            # log_calls(logFile, "\n\t.//Internals/Boundary/Lines\n\t" + str(internals_element))
        polygon = self.coordToPolygon(external_coords)
        for internal_coords in internal_coords_list:
            polygon.addInteriorRing(internal_coords)
        # endregion
        # regionüìå –î—ñ–ª—è–Ω–∫–∞ -> Canvas
        feature = QgsFeature(layer.fields())
        feature.setGeometry(QgsGeometry(polygon))
        feature.setAttributes([
            parcel_id,
            description,
            float(area_size) if area_size else None,
            area_unit,
            area_method,
            region,
            settlement,
            district,
            parcel_location,
            street_type,
            street_name,
            building,
            block,
            additional_info,
            category,
            purpose,
            use,
            code,
            ])
        
        layer_provider.addFeature(feature)

        QgsProject.instance().addMapLayer(layer, False)
        # endregion
        # regionüìå –î—ñ–ª—è–Ω–∫–∞ -> –Ω–∞–≤–µ—Ä—Ö
        tree_layer = QgsLayerTreeLayer(layer)
        group = self.layers_root.findGroup(self.group_name)
        if group is None:
            group = self.layers_root.addGroup(self.group_name)

        self.group.addChildNode(tree_layer)
        self.added_layers.append(tree_layer)
        self.last_to_first(group)
        # endregion
    def on_editing_stopped(self):
        """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—É editingStopped."""
        #‚úîÔ∏è 2025.05.19 —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –∑ –±—É–¥—å-—è–∫–æ–≥–æ —à–∞—Ä—É
        # –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —è–∫ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤, —Ç–∞–∫ —ñ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó –æ–±'—î–∫—Ç–∞
        # –æ–∑–Ω–∞—á–∞—î —â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ —ñ –∑–º—ñ–Ω–∏ —É –¥–µ—Ä–µ–≤—ñ xml
        # —Ç—Ä–µ–±–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ —É —Ñ–∞–π–ª xml        
        log_calls(logFile, f"–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ {self.xmlFilePath}.")
        self.layer_modified = True
        self.tree.write(self.xmlFilePath, encoding="utf-8", xml_declaration=True)
        self.show_message("on_editing_stopped", f"–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ {self.xmlFilePath}.")


    def handle_parcel_attribute_change(self, layer, fid, field_index, new_value):

        field_name = layer.fields()[field_index].name()
        log_calls(logFile, f"–ó–º—ñ–Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—è ‚Ññ{field_name} –Ω–∞ {new_value}")
    
        # –±–ª–æ–∫—É–≤–∞—Ç–∏ —Ç—Ä–µ–±–∞ —â–æ–±, –Ω–µ –±—É–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É —Ñ–æ—Ä–º –≤–≤–æ–¥—É
        # –ø—Ä–∏ –≤—ñ–¥–º—ñ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∑—Ä–æ–±–ª–µ–Ω–∏—Ö –∑–º—ñ–Ω 
        if self.block_attribute_handling:
            return 

        # –í–∏—Ö—ñ–¥ (return), —è–∫—â–æ self.id –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º != self.id 
        if layer.customProperty("xml_layer_id") != self.id:
            return

        # –í–∏–ø–∞–¥–æ–∫ –∑–º—ñ–Ω–∏ "–°–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ" - –Ω–∞–π—Å–∫–ª–∞–¥–Ω—ñ—à–∏–π
        if field_name == "DeterminationMethod":
            # 1.1: –ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –º—ñ—Å—Ü–µ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            log_msg(logFile, f"–ó–º—ñ–Ω–∞ —Å–ø–æ—Å–æ–±—É –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –Ω–∞ {new_value}")
            if new_value == "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –º—ñ—Å—Ü–µ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç":
                # —Ç—Ä–µ–±–∞ –≤–≤–µ—Å—Ç–∏ "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –ú–°–ö
                msk_number, ok = QInputDialog.getText(
                    None,
                    "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –ú–°–ö",
                    "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –º—ñ—Å—Ü–µ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 4610102):"
                )
                if ok and msk_number.strip():
                    # –≤–≤–µ–¥–µ–Ω–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –ú–°–ö -> —Ñ–æ—Ä–º—É—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∫–æ–º–±–æ–±–æ–∫—Å–∞
                    new_label = f"–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –º—ñ—Å—Ü–µ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ú–°–ö {msk_number.strip()}"
                    # –±–ª–æ–∫—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—É–¥—å-—è–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤
                    layer.blockSignals(True)
                    # TODO: –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∫–æ–º–±–æ–±–æ–∫—Å–∞ –∑ + ‚Ññ –ú–°–ö
                    # –∑–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ —É —è–∫–æ—Å—Ç—ñ –∫–æ—Å—Ç–∏–ª—è
                    self.show_message("–°–ø–æ—Å—ñ–± –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –¥—ñ–ª—è–Ω–∫–∏:", new_label)
                    layer.changeAttributeValue(fid, field_index, new_label)
                    # –∑–Ω–æ–≤—É –æ—Ç—Ä–∏–º—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏
                    layer.blockSignals(False)
                    # –ë–ª–æ–∫—É—î–º–æ –Ω–∞—Å—Ç—É–Ω—ñ –∑–º—ñ–Ω–∏ –≤—Å—ñ—Ö –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ –¥–∞–Ω–æ–≥–æ id 
                    # –¥–ª—è –≤—Å—ñ—Ö –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ –≤—Å—ñ—Ö —à–∞—Ä—ñ–≤ –¥–∞–Ω–æ—ó –≥—Ä—É–ø–∏
                    #‚úîÔ∏è 2025.06.19 Gemini:
                    # —ñ–º–æ–≤—ñ—Ä–Ω–æ, —â–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Å–∞–º–µ —Ü–µ –±–ª–æ–∫—É—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å
                    # –ø–æ–¥–∞–ª—å—à–æ—ó –∑–º—ñ–Ω–∏ —Å–ø–æ—Å–æ–±—É –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –¥—ñ–ª—è–Ω–∫–∏
                    # –Ω–∞ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –¥—ñ–ª—è–Ω–∫–∏
                    #self.block_attribute_handling = True 
                    # –û–Ω–æ–≤–ª—é—î–º–æ tree
                    self.update_area_determination_in_tree(new_label)
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ—Ä–º—É
                    layer.triggerRepaint()
                else:
                    log_msg(logFile, "–ù–æ–º–µ—Ä –ú–°–ö –Ω–µ –≤–≤–µ–¥–µ–Ω–æ ‚Äî –∑–º—ñ–Ω–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞‚ùó")
                return # "–°–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ" -> –ú–°–ö
            else:
                # –°–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –¥—ñ–ª—è–Ω–∫–∏ –Ω–µ –ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –ú–°–ö
                log_msg(logFile, f"–°–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –¥—ñ–ª—è–Ω–∫–∏ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_value}")
                # self.show_message("handle_parcel_attribute_change:", f"–°–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –¥—ñ–ª—è–Ω–∫–∏ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_value}")
                # –û–Ω–æ–≤–ª—é—î–º–æ XML
                self.update_area_determination_in_tree(new_value)
            return # —ñ–Ω—à—ñ –∑–Ω–∞—á–µ–Ω–Ω—è "–°–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ"

        # —Ç—É—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –æ–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω –ø–æ–ª—ñ–≤ –≤—ñ–¥–º—ñ–Ω–Ω–∏—Ö –≤—ñ–¥ "–°–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ"

        if field_name == "ParcelID":
            log_msg(logFile, f"–ó–º—ñ–Ω–∞ ParcelID –Ω–∞ {new_value}")
            # –ë–ª–æ–∫—É—î QGIS
            # layer.changeAttributeValue(fid, field_index, new_value)
            element_path = "/InfoPart/CadastralZoneInfo/CadastralQuarters/CadastralQuarterInfo/Parcels/ParcelInfo/ParcelMetricInfo/ParcelID"
            element = self.tree.find(element_path)
            if element is None:
                log_msg(logFile, f"–ï–ª–µ–º–µ–Ω—Ç –∑–∞ —à–ª—è—Ö–æ–º {element_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ‚ùó")
                return
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è element
            element.text = new_value
            self.show_message("handle_parcel_attribute_change:", f"ParcelID –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_value}")
            
            
        
        return # —ñ–Ω—à—ñ –ø–æ–ª—è
    def update_area_determination_in_tree(self, new_value):
        #‚úîÔ∏è 2025.06.09 
        # –ü—Ä–æ–±–ª–µ–º–∞:
        # –ü—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Å–ø–æ—Å–æ–±—É –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –¥—ñ–ª—è–Ω–∫–∏ –Ω–∞ 
        # "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –º—ñ—Å—Ü–µ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"
        # –ø–æ–≤—Ç–æ—Ä–Ω–∞ –∑–º—ñ–Ω–∞ –Ω–∞ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ
        # –Ω–µ –æ–Ω–æ–≤–ª—é—î XML —Ñ–∞–π–ª (–º–æ–∂–ª–∏–≤–æ, —ñ –¥–µ—Ä–µ–≤–æ), –∞ –ª–∏—à–µ –∑–º—ñ–Ω—é—î —Ç–µ–∫—Å—Ç —É –∫–æ–º–±–æ–±–æ–∫—Å—ñ

        # –í–∏–∫–ª–∏–∫ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó –æ–∑–Ω–∞—á–∞—î, —â–æ:
        # –ó–º—ñ–Ω–µ–Ω–æ —Å–ø–æ—Å—ñ–± –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –¥—ñ–ª—è–Ω–∫–∏ –Ω–∞ –ø–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –ú–°–ö
        log_calls(logFile, f"{new_value}")
        # –®–ª—è—Ö –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–æ–º–∏–π:
        element_path = "/InfoPart/CadastralZoneInfo/CadastralQuarters/CadastralQuarterInfo/Parcels/ParcelInfo/ParcelMetricInfo/Area/DeterminationMethod"
        element = self.tree.find(element_path)
        if element is None:
            log_msg(logFile, f"–ï–ª–µ–º–µ–Ω—Ç –∑–∞ —à–ª—è—Ö–æ–º {element_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ‚ùó")
            return
        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        for child in list(element):
            element.remove(child)

        # –Ø–∫—â–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –º—ñ—Å—Ü–µ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"
        if new_value.startswith("–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –º—ñ—Å—Ü–µ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"):
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ú–°–ö
            number_MCK = new_value.split(" ")[-1]
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç
            new_element = ET.fromstring(f"<Calculation><CoordinateSystem><Local>{number_MCK}</Local></CoordinateSystem></Calculation>")
        # –ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω—à–µ –Ω—ñ–∂ "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –º—ñ—Å—Ü–µ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"
        else:
            # "–ó–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –æ–±–º—ñ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª—É",
            # "–ó–≥—ñ–¥–Ω–æ —ñ–∑ –ø—Ä–∞–≤–æ–≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞–ª—å–Ω–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º",
            # "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ '–°–ö-42' (6 –≥—Ä–∞–¥ –∑–æ–Ω–∞)",
            # "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ '–°–ö-42' (3 –≥—Ä–∞–¥ –∑–æ–Ω–∞)",
            # "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ '–£–°–ö2000'",
            # "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'WGS84'",
            # "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63-X'",
            # "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63-C'",
            # "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63-P'",
            # "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63-T'",

            log_msg(logFile, f"new_value = {new_value}")

            if new_value.startswith("–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'SC63"):
                zona = new_value[-2]
                log_msg(logFile, f"zona = {zona}")
                new_element = ET.fromstring(f"<Calculation><CoordinateSystem><SC63><{zona}/></SC63></CoordinateSystem></Calculation>")
            if new_value.startswith("–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ '–£–°–ö2000'"):
                new_element = ET.fromstring("<Calculation><CoordinateSystem><USC2000/></CoordinateSystem></Calculation>")
            if new_value.startswith("–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ 'WGS84'"):
                new_element = ET.fromstring("<Calculation><CoordinateSystem><WGS84/></CoordinateSystem></Calculation>")
            if new_value.startswith("–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ '–°–ö-42' (6 –≥—Ä–∞–¥ –∑–æ–Ω–∞)"):
                new_element = ET.fromstring("<Calculation><CoordinateSystem><SC42/></CoordinateSystem></Calculation>")
            if new_value.startswith("–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ '–°–ö-42' (3 –≥—Ä–∞–¥ –∑–æ–Ω–∞)"):
                new_element = ET.fromstring("<Calculation><CoordinateSystem><SC42_3/></CoordinateSystem></Calculation>")
            if new_value.startswith("–ó–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –æ–±–º—ñ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª—É"):
                new_element = ET.fromstring("<ExhangeFileCoordinates></ExhangeFileCoordinates>")
            if new_value.startswith("–ó–≥—ñ–¥–Ω–æ —ñ–∑ –ø—Ä–∞–≤–æ–≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞–ª—å–Ω–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"):
                new_element = ET.fromstring("<DocExch></DocExch>")
            

        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –∑ —Ç–µ–∫—Å—Ç–æ–º –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
        element.append(new_element)
    def show_message(self, header, message):
        iface.messageBar().pushMessage(
            header,  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            message,  # –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            level=Qgis.Success,  # –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑–µ–ª–µ–Ω–∏–π —Ñ–æ–Ω)
            duration=0  # 0 —Å–µ–∫—É–Ω–¥ ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –∂–∏—Ç–∏ –≤—ñ—á–Ω–æ, –ø–æ–∫–∏ –Ω–µ –∑–∞–∫—Ä–∏—é—Ç—å
        )
    def last_to_first(self, group):
        """–ü–µ—Ä–µ–º—ñ—â—É—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ—á—ñ—Ä–Ω—ñ–π –≤—É–∑–æ–ª –≥—Ä—É–ø–∏ —à–∞—Ä—ñ–≤ –Ω–∞ –ø–µ—Ä—à—É –ø–æ–∑–∏—Ü—ñ—é."""
        if group is None:
            return

        children = group.children()  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –≤—É–∑–ª—ñ–≤
        child_count = len(children)  # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—á—ñ—Ä–Ω—ñ—Ö –≤—É–∑–ª—ñ–≤

        if child_count < 2:
            return

        last_child = children[-1]  # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ—á—ñ—Ä–Ω—ñ–π –≤—É–∑–æ–ª
        cloned_last_child = last_child.clone() # –ö–ª–æ–Ω—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ—á—ñ—Ä–Ω—ñ–π –≤—É–∑–æ–ª

        group.insertChildNode(0, cloned_last_child) # –í—Å—Ç–∞–≤–ª—è—î–º–æ –∫–ª–æ–Ω –Ω–∞ –ø–µ—Ä—à—É –ø–æ–∑–∏—Ü—ñ—é
        group.removeChildNode(last_child) # –í–∏–¥–∞–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ—á—ñ—Ä–Ω—ñ–π –≤—É–∑–æ–ª
    def get_full_name(self, person_element):

        # log_msg(logFile)

        if person_element is None:
            return ""  # –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–∫—Ä–µ–º—ñ —á–∞—Å—Ç–∏–Ω–∏ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–æ–Ω–∏ —ñ—Å–Ω—É—é—Ç—å
        last_name = person_element.find("LastName").text if person_element.find("LastName") is not None else ""
        first_name = person_element.find("FirstName").text if person_element.find("FirstName") is not None else ""
        middle_name = person_element.find("MiddleName").text if person_element.find("MiddleName") is not None else ""

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–µ —ñ–º'—è
        full_name = f"{last_name} {first_name} {middle_name}".strip()
        return full_name
    def add_quartal(self):

        # log_calls(logFile)

        quarter_info = {}
        quarter_number = self.root.find(".//CadastralQuarterInfo/CadastralQuarterNumber").text

        for quarter in self.root.findall(".//CadastralQuarterInfo"):
            local_authority = quarter.find("RegionalContacts/LocalAuthorityHead")
            dkzr_head = quarter.find("RegionalContacts/DKZRHead")

            quarter_info[quarter_number] = {
                "LocalAuthorityHead": {
                    "LastName": local_authority.find("LastName").text,
                    "FirstName": local_authority.find("FirstName").text,
                    "MiddleName": local_authority.find("MiddleName").text,
                },
                "DKZRHead": {
                    "LastName": dkzr_head.find("LastName").text,
                    "FirstName": dkzr_head.find("FirstName").text,
                    "MiddleName": dkzr_head.find("MiddleName").text,
                },
            }

        layer = QgsVectorLayer("MultiPolygon?crs=" + self.crsEpsg, "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –∫–≤–∞—Ä—Ç–∞–ª", "memory")
        layer.loadNamedStyle(os.path.dirname(__file__) + "/templates/quarter.qml")
        layer_provider = layer.dataProvider()

        layer_provider.addAttributes([
            QgsField("CadastralQuarterNumber", QVariant.String),
            QgsField("LocalAuthorityHead", QVariant.String),
            QgsField("DKZRHead", QVariant.String)
        ])
        layer.updateFields()

        for quarter in self.root.findall(".//CadastralQuarterInfo"):
            externals_element = quarter.find(".//Externals/Boundary/Lines")
            # log_calls(logFile, "\n\t.//Externals/Boundary/Lines\n\t" + str(externals_element))
            if externals_element is not None:
                external_coords = self.linesToCoordinates(externals_element)

                logstr = ''
                i = 0
                for point in external_coords:
                    i += 1
                    logstr += f"\n\t {str(i)}. {point.x():.2f}, {point.y():.2f}"
                # log_calls(logFile, "\n\t external_coords: " + logstr)

            internals_element = quarter.find(".//Internals/Boundary/Lines")
            # log_calls(logFile, "\n\t.//Internals/Boundary/Lines\n\t" + str(externals_element))

            internal_coords_list = []
            if internals_element is not None:
                internal_coords_list.append(self.linesToCoordinates(internals_element))

            polygon = self.coordToPolygon(external_coords)
            for internal_coords in internal_coords_list:
                polygon.addInteriorRing(internal_coords)




        for quarter in self.root.findall(".//CadastralQuarterInfo"):
            auth_head = quarter.find("RegionalContacts/LocalAuthorityHead")
            dkzr_head = quarter.find("RegionalContacts/DKZRHead")

            auth_head_full_name = self.get_full_name(auth_head)
            dkzr_head_full_name = self.get_full_name(dkzr_head)

            # log_calls(logFile, f"Auth Head: {auth_head_full_name}")
            # log_calls(logFile, f"DKZR Head: {dkzr_head_full_name}")

        features = []
        feature = QgsFeature(layer.fields())

        feature.setGeometry(QgsGeometry(polygon))
        feature.setAttribute("CadastralQuarterNumber", quarter_number)
        feature.setAttribute("LocalAuthorityHead", auth_head_full_name)
        feature.setAttribute("DKZRHead", dkzr_head_full_name)

        # –î–æ–¥–∞—î–º–æ –æ–±'—î–∫—Ç –¥–æ —Å–ø–∏—Å–∫—É
        features.append(feature)

        # –û–Ω–æ–≤–∏—Ç–∏ —à–∞—Ä
        layer.triggerRepaint()

        layer_provider.addFeatures(features)

        # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É, –∞–ª–µ –Ω–µ –¥–æ –¥–µ—Ä–µ–≤–∞ —à–∞—Ä—ñ–≤
        QgsProject.instance().addMapLayer(layer, False) 
        tree_layer = QgsLayerTreeLayer(layer)
        # Get the group directly or create it if it doesn't exist:
        group = self.layers_root.findGroup(self.group_name)
        if group is None:
            group = self.layers_root.addGroup(self.group_name)

        # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –≥—Ä—É–ø–∏
        self.group.addChildNode(tree_layer) 
        self.added_layers.append(tree_layer)
        self.last_to_first(group)
    def last_to_first(self, group):
        """–ü–µ—Ä–µ–º—ñ—â—É—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ—á—ñ—Ä–Ω—ñ–π –≤—É–∑–æ–ª –≥—Ä—É–ø–∏ —à–∞—Ä—ñ–≤ –Ω–∞ –ø–µ—Ä—à—É –ø–æ–∑–∏—Ü—ñ—é."""
        if group is None:
            return

        children = group.children()  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –≤—É–∑–ª—ñ–≤
        child_count = len(children)  # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—á—ñ—Ä–Ω—ñ—Ö –≤—É–∑–ª—ñ–≤

        if child_count < 2:
            return

        last_child = children[-1]  # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ—á—ñ—Ä–Ω—ñ–π –≤—É–∑–æ–ª
        cloned_last_child = last_child.clone() # –ö–ª–æ–Ω—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ—á—ñ—Ä–Ω—ñ–π –≤—É–∑–æ–ª

        group.insertChildNode(0, cloned_last_child) # –í—Å—Ç–∞–≤–ª—è—î–º–æ –∫–ª–æ–Ω –Ω–∞ –ø–µ—Ä—à—É –ø–æ–∑–∏—Ü—ñ—é
        group.removeChildNode(last_child) # –í–∏–¥–∞–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ—á—ñ—Ä–Ω—ñ–π –≤—É–∑–æ–ª
    def removeLayer(self, layer_name, group_name=None):
        """
            Removes a layer with the given name from a specified group 
            or from the root of the layer tree.
            
            Args:
                layer_name (str): 
                    The name of the layer to be removed.
                group_name (str, optional): 
                    The name of the group from which to remove the layer. 
                    If None or "", the layer is searched for in the root 
                    of the layer tree. Defaults to None.

        """
        # log_calls(logFile, f"'{layer_name}'")

        root = QgsProject.instance().layerTreeRoot()

        if group_name is None or group_name == "":
            parent = root
        else:
            parent = root.findGroup(group_name)
            if parent is None:
                log_calls(logFile, f"'{group_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. \n–®–∞—Ä '{layer_name}' –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                return

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —à–∞—Ä —É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –≤—É–∑–ª—ñ (–≥—Ä—É–ø—ñ –∞–±–æ –∫–æ—Ä–µ–Ω—ñ) –∑–∞ —ñ–º–µ–Ω–µ–º
        for child in parent.children():
            if isinstance(child, QgsLayerTreeLayer) and child.name() == layer_name:
                layer_id = child.layerId()  # –û—Ç—Ä–∏–º—É—î–º–æ ID —à–∞—Ä—É –∫–∞—Ä—Ç–∏
                QgsProject.instance().removeMapLayer(layer_id)  # –í–∏–¥–∞–ª—è—î–º–æ —à–∞—Ä –∑ –ø—Ä–æ–µ–∫—Ç—É
                parent.removeChildNode(child)  # –í–∏–¥–∞–ª—è—î–º–æ —à–∞—Ä –∑ –¥–µ—Ä–µ–≤–∞
                log_calls(logFile, f"–®–∞—Ä '{layer_name}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≥—Ä—É–ø–∏ {group_name}") 
                return  # –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —à–∞—Ä—É

        # log_calls(logFile, f"–®–∞—Ä '{layer_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≥—Ä—É–ø—ñ {group_name}")
    def add_lines(self):

        # log_calls(logFile)

        layer_name = "–õ—ñ–Ω—ñ—ó XML"
        # log_msg(logFile, " layer_name = " + layer_name)
        self.removeLayer(layer_name)
        layer = QgsVectorLayer("LineString?crs=" + self.crsEpsg, layer_name, "memory")

        if layer.isValid():
            layer.loadNamedStyle(os.path.dirname(__file__) + "/templates/lines.qml")
            # –¥–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É, –∞–ª–µ –Ω–µ –¥–æ –¥–µ—Ä–µ–≤–∞ —à–∞—Ä—ñ–≤
            QgsProject.instance().addMapLayer(layer, False)
            tree_layer = QgsLayerTreeLayer(layer)
            
            # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –≥—Ä—É–ø–∏
            self.group.addChildNode(tree_layer) 
            # log_msg(logFile, f"–î–æ–¥–∞–Ω–æ —à–∞—Ä {layer.name()}")
            # –°—Ç–∞—Ä–∞ –º–æ–¥–µ–ª—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
            # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
            #if self.plugin: self.plugin.connect_layer_signals_for_layer(layer)
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —à–∞—Ä—ñ–≤ 
            self.added_layers.append(tree_layer)
            # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —à–∞—Ä –Ω–∞ –≤–µ—Ä—Ö –≥—Ä—É–ø–∏
            # self.last_to_first(group) 

        else:
            QMessageBox.critical(self, "xml_ua", "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —à–∞—Ä—É –ª—ñ–Ω—ñ–π.")

        provider = layer.dataProvider()
        provider.addAttributes([QgsField("ULID", QVariant.String)])
        provider.addAttributes([QgsField("Length", QVariant.String)])
        layer.updateFields()

        self.qgisLinesXML = {}
        for point in self.root.findall(".//Point"):
            uidp = point.find("UIDP").text
            x = float(point.find("X").text)
            y = float(point.find("Y").text)
            self.qgisLinesXML[uidp] = QgsPointXY(y, x)
            # log_msg(logFile, " self.qgisLinesXML[" + uidp + "] = " + str(self.qgisLinesXML[uidp]))

        # –î–æ–¥–∞—î–º–æ –ø–æ–ª—ñ–ª—ñ–Ω—ñ—ó –Ω–∞ —à–∞—Ä
        for pl in self.root.findall(".//PL"):
            point_ids = [p.text for p in pl.find("Points").findall("P")]
            line_ULID = pl.find("ULID")
            line_length = pl.find("Length")
            # log_msg(logFile, " line_ULID = " + line_ULID.text)
            polyline_points = [self.qgisLinesXML[pid] for pid in point_ids if pid in self.qgisLinesXML]
            fields = layer.fields()
            feature = QgsFeature(fields)
            feature["ULID"] = line_ULID.text
            feature["Length"] = line_length.text
            # log_msg(logFile, " feature['ULID'] = " + feature["ULID"])
            feature.setGeometry(QgsGeometry.fromPolylineXY(polyline_points))
            provider.addFeatures([feature])
        
            
        layer.updateExtents()
        layer.triggerRepaint(deferredUpdate = True)

        return
    def add_lands(self):
        """
        –Ü–º–ø–æ—Ä—Ç—É—î —É–≥—ñ–¥–¥—è –∑ XML-—Ñ–∞–π–ª—É —Ç–∞ –¥–æ–¥–∞—î —ó—Ö —è–∫ –Ω–æ–≤–∏–π —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É QGIS.
        –í—Ä–∞—Ö–æ–≤—É—î, —â–æ —É–≥—ñ–¥—å –º–æ–∂–µ –±—É—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞.
        """
        # log_msg(logFile)

        layer_name = "–£–≥—ñ–¥–¥—è"
        layer = QgsVectorLayer("MultiPolygon?crs=" + self.crsEpsg, layer_name, "memory")
        layer.loadNamedStyle(os.path.dirname(__file__) + "/templates/lands_parcel.qml")
        layer_provider = layer.dataProvider()
        fields = [
            QgsField("CadastralCode", QVariant.String),
            QgsField("LandCode", QVariant.String),
            QgsField("Size", QVariant.Double),
        ]
        layer_provider.addAttributes(fields)
        layer.updateFields()

        for lands_parcel in self.root.findall(".//LandsParcel/LandParcelInfo/MetricInfo"):
            cadastral_code = lands_parcel.find("../CadastralCode").text if lands_parcel.find("../CadastralCode") is not None else None
            land_code = lands_parcel.find("../LandCode").text if lands_parcel.find("../LandCode") is not None else None
            size_element = lands_parcel.find("./Area/Size")
            size = float(size_element.text) if size_element is not None and size_element.text else None

            # –ó–æ–≤–Ω—ñ—à–Ω—ñ –º–µ–∂—ñ
            externals_element = lands_parcel.find(".//Externals/Boundary/Lines")
            if externals_element is not None:
                external_coords = self.linesToCoordinates(externals_element)
            else:
                external_coords = []

            # –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –º–µ–∂—ñ
            internals_element = lands_parcel.find(".//Internals/Boundary/Lines")
            internal_coords_list = []
            if internals_element is not None:
                internal_coords_list.append(self.linesToCoordinates(internals_element))

            polygon = self.coordToPolygon(external_coords)
            for internal_coords in internal_coords_list:
                polygon.addInteriorRing(internal_coords)

            feature = QgsFeature()
            feature.setGeometry(QgsGeometry(polygon))
            feature.setAttributes([cadastral_code, land_code, size])
            layer_provider.addFeature(feature)

        QgsProject.instance().addMapLayer(layer, False)  # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É, –∞–ª–µ –Ω–µ –¥–æ –¥–µ—Ä–µ–≤–∞ —à–∞—Ä—ñ–≤
        tree_layer = QgsLayerTreeLayer(layer)
        # Get the group directly or create it if it doesn't exist:
        group = self.layers_root.findGroup(self.group_name)
        if group is None:
            group = self.layers_root.addGroup(self.group_name)

        # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –≥—Ä—É–ø–∏
        self.group.addChildNode(tree_layer) 
        #log_msg(logFile, f"–î–æ–¥–∞–Ω–æ —à–∞—Ä {layer.name()}")
        # –°—Ç–∞—Ä–∞ –º–æ–¥–µ–ª—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
        #if self.plugin: self.plugin.connect_layer_signals_for_layer(layer)
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —à–∞—Ä—ñ–≤ 
        self.added_layers.append(tree_layer)
        # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —à–∞—Ä –Ω–∞ –≤–µ—Ä—Ö –≥—Ä—É–ø–∏
        self.last_to_first(group) 
    def add_leases(self):
        """
        –Ü–º–ø–æ—Ä—Ç—É—î –¥–∞–Ω—ñ –ø—Ä–æ –æ—Ä–µ–Ω–¥—É –∑ XML-—Ñ–∞–π–ª—É —Ç–∞ –¥–æ–¥–∞—î —ó—Ö —è–∫ –Ω–æ–≤–∏–π —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É QGIS.
        """
        # log_calls(logFile)

        layer_name = "–û—Ä–µ–Ω–¥–∞"
        layer = QgsVectorLayer("MultiPolygon?crs=" + self.crsEpsg, layer_name, "memory")
        layer.loadNamedStyle(os.path.dirname(__file__) + "/templates/lease.qml")
        layer_provider = layer.dataProvider()
        fields = [
            QgsField("LeaseDuration", QVariant.String),
            QgsField("RegistrationDate", QVariant.String),
            QgsField("Area", QVariant.Double),
        ]
        layer_provider.addAttributes(fields)
        layer.updateFields()

        leases_parent = self.root.find(".//Leases")
        if leases_parent is None:
            log_msg(logFile, "–†–æ–∑–¥—ñ–ª Leases –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –û—Ä–µ–Ω–¥–∏ –Ω–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ.")
            return

        for lease in leases_parent.findall(".//LeaseInfo"):
            lease_duration = lease.find(".//LeaseAgreement/LeaseTerm/LeaseDuration").text if lease.find(".//LeaseAgreement/LeaseTerm/LeaseDuration") is not None else None
            registration_date = lease.find(".//LeaseAgreement/RegistrationDate").text if lease.find(".//LeaseAgreement/RegistrationDate") is not None else None
            area_element = lease.find(".//LeaseAgreement/Area")
            area = float(area_element.text) if area_element is not None and area_element.text else None

            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ –º–µ–∂—ñ –∑ –æ–±'—î–∫—Ç–∞ (–æ—Ä–µ–Ω–¥–∏)
            externals_element = lease.find(".//Externals/Boundary/Lines")
            if externals_element is not None:
                external_coords = self.lines_element2polygone(externals_element)
            else:
                external_coords = []

            # –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –º–µ–∂—ñ
            internals_element = lease.find(".//Internals/Boundary/Lines")
            internal_coords_list = []
            if internals_element is not None:
                internal_coords_list.append(self.lines_element2polygone(internals_element))

            polygon = self.coordToPolygon(external_coords)
            for internal_coords in internal_coords_list:
                polygon.addInteriorRing(internal_coords)

            feature = QgsFeature()
            feature.setGeometry(QgsGeometry(polygon))
            feature.setAttributes([lease_duration, registration_date, area])
            layer_provider.addFeature(feature)

        QgsProject.instance().addMapLayer(layer, False)  # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É, –∞–ª–µ –Ω–µ –¥–æ –¥–µ—Ä–µ–≤–∞ —à–∞—Ä—ñ–≤
        tree_layer = QgsLayerTreeLayer(layer)
        # Get the group directly or create it if it doesn't exist:
        group = self.layers_root.findGroup(self.group_name)
        if group is None:
            group = self.layers_root.addGroup(self.group_name)

        # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –≥—Ä—É–ø–∏
        self.group.addChildNode(tree_layer) 
        # log_msg(logFile, f"–î–æ–¥–∞–Ω–æ —à–∞—Ä {layer.name()}")
        # –°—Ç–∞—Ä–∞ –º–æ–¥–µ–ª—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
        #if self.plugin: self.plugin.connect_layer_signals_for_layer(layer)
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —à–∞—Ä—ñ–≤ 
        self.added_layers.append(tree_layer)
        # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —à–∞—Ä –Ω–∞ –≤–µ—Ä—Ö –≥—Ä—É–ø–∏
        self.last_to_first(group) 
    def add_subleases(self):
        """
        –Ü–º–ø–æ—Ä—Ç—É—î –¥–∞–Ω—ñ –ø—Ä–æ —Å—É–±–æ—Ä–µ–Ω–¥—É –∑ XML-—Ñ–∞–π–ª—É —Ç–∞ –¥–æ–¥–∞—î —ó—Ö —è–∫ –Ω–æ–≤–∏–π —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É QGIS.
        """
        # log_calls(logFile)

        layer_name = "–°—É–±–æ—Ä–µ–Ω–¥–∞"
        layer = QgsVectorLayer("MultiPolygon?crs=" + self.crsEpsg, layer_name, "memory")
        layer.loadNamedStyle(os.path.dirname(__file__) + "/templates/sublease.qml")
        layer_provider = layer.dataProvider()
        fields = [
            QgsField("RegistrationDate", QVariant.String),
            QgsField("Area", QVariant.Double),
        ]
        layer_provider.addAttributes(fields)
        layer.updateFields()

        subleases_parent = self.root.find(".//Subleases")
        if subleases_parent is None:
            log_msg(logFile, "–†–æ–∑–¥—ñ–ª Subleases –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –°—É–±–æ—Ä–µ–Ω–¥–∏ –Ω–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ.")
            return

        for sublease in subleases_parent.findall(".//SubleaseInfo"):
            registration_date = sublease.find(".//RegistrationDate").text if sublease.find(".//RegistrationDate") is not None else None
            area_element = sublease.find(".//Area")
            area = float(area_element.text) if area_element is not None and area_element.text else None

            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ –º–µ–∂—ñ –∑ –æ–±'—î–∫—Ç–∞ (—Å—É–±–æ—Ä–µ–Ω–¥–∏)
            externals_element = sublease.find(".//Externals/Boundary/Lines")
            if externals_element is not None:
                external_coords = self.lines_element2polygone(externals_element)
            else:
                external_coords = []

            # –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –º–µ–∂—ñ
            internals_element = sublease.find(".//Internals/Boundary/Lines")
            internal_coords_list = []
            if internals_element is not None:
                internal_coords_list.append(self.lines_element2polygone(internals_element))

            polygon = self.coordToPolygon(external_coords)
            for internal_coords in internal_coords_list:
                polygon.addInteriorRing(internal_coords)

            feature = QgsFeature()
            feature.setGeometry(QgsGeometry(polygon))
            feature.setAttributes([registration_date, area])
            layer_provider.addFeature(feature)

        QgsProject.instance().addMapLayer(layer, False)  # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É, –∞–ª–µ –Ω–µ –¥–æ –¥–µ—Ä–µ–≤–∞ —à–∞—Ä—ñ–≤
        tree_layer = QgsLayerTreeLayer(layer)
        # Get the group directly or create it if it doesn't exist:
        group = self.layers_root.findGroup(self.group_name)
        if group is None:
            group = self.layers_root.addGroup(self.group_name)

        # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –≥—Ä—É–ø–∏
        self.group.addChildNode(tree_layer) 
        # log_msg(logFile, f"–î–æ–¥–∞–Ω–æ —à–∞—Ä {layer.name()}")
        # –°—Ç–∞—Ä–∞ –º–æ–¥–µ–ª—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
        #if self.plugin: self.plugin.connect_layer_signals_for_layer(layer)
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —à–∞—Ä—ñ–≤ 
        self.added_layers.append(tree_layer)
        # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —à–∞—Ä –Ω–∞ –≤–µ—Ä—Ö –≥—Ä—É–ø–∏
        self.last_to_first(group) 
    def add_restrictions(self):
        """
        –Ü–º–ø–æ—Ä—Ç—É—î –¥–∞–Ω—ñ –ø—Ä–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑ XML-—Ñ–∞–π–ª—É —Ç–∞ –¥–æ–¥–∞—î —ó—Ö —è–∫ –Ω–æ–≤–∏–π —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É QGIS.
        """
        # log_calls(logFile)

        layer_name = "–û–±–º–µ–∂–µ–Ω–Ω—è"
        layer = QgsVectorLayer("MultiPolygon?crs=" + self.crsEpsg, layer_name, "memory")
        layer.loadNamedStyle(os.path.dirname(__file__) + "/templates/restriction.qml")
        layer_provider = layer.dataProvider()
        fields = [
            QgsField("RestrictionCode", QVariant.String),
            QgsField("RestrictionName", QVariant.String),
            QgsField("StartDate", QVariant.String),
            QgsField("ExpirationDate", QVariant.String),
        ]
        layer_provider.addAttributes(fields)
        layer.updateFields()

        restrictions_parent = self.root.find(".//Restrictions")
        if restrictions_parent is None:
            log_msg(logFile, "–†–æ–∑–¥—ñ–ª Restrictions –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ.")
            return

        for restriction in restrictions_parent.findall(".//RestrictionInfo"):
            restriction_code = restriction.find(".//RestrictionCode").text if restriction.find(".//RestrictionCode") is not None else None
            restriction_name = restriction.find(".//RestrictionName").text if restriction.find(".//RestrictionName") is not None else None
            start_date = restriction.find(".//RestrictionTerm/Time/StartDate").text if restriction.find(".//RestrictionTerm/Time/StartDate") is not None else None
            expiration_date = restriction.find(".//RestrictionTerm/Time/ExpirationDate").text if restriction.find(".//RestrictionTerm/Time/ExpirationDate") is not None else None

            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ –º–µ–∂—ñ –∑ –æ–±'—î–∫—Ç–∞ (–æ–±–º–µ–∂–µ–Ω–Ω—è)
            externals_element = restriction.find(".//Externals/Boundary/Lines")
            if externals_element is not None:
                external_coords = self.lines_element2polygone(externals_element)
            else:
                external_coords = []

            # –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –º–µ–∂—ñ
            internals_element = restriction.find(".//Internals/Boundary/Lines")
            internal_coords_list = []
            if internals_element is not None:
                internal_coords_list.append(self.lines_element2polygone(internals_element))

            polygon = self.coordToPolygon(external_coords)
            for internal_coords in internal_coords_list:
                polygon.addInteriorRing(internal_coords)

            feature = QgsFeature()
            feature.setGeometry(QgsGeometry(polygon))
            feature.setAttributes([restriction_code, restriction_name, start_date, expiration_date])
            layer_provider.addFeature(feature)

        # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É, –∞–ª–µ –Ω–µ –¥–æ –¥–µ—Ä–µ–≤–∞ —à–∞—Ä—ñ–≤
        QgsProject.instance().addMapLayer(layer, False)  
        tree_layer = QgsLayerTreeLayer(layer)
        # Get the group directly or create it if it doesn't exist:
        group = self.layers_root.findGroup(self.group_name)
        if group is None:
            group = self.layers_root.addGroup(self.group_name)

        # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –≥—Ä—É–ø–∏
        self.group.addChildNode(tree_layer) 
        # log_msg(logFile, f"–î–æ–¥–∞–Ω–æ —à–∞—Ä {layer.name()}")
        # –°—Ç–∞—Ä–∞ –º–æ–¥–µ–ª—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
        #if self.plugin: self.plugin.connect_layer_signals_for_layer(layer)
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —à–∞—Ä—ñ–≤ 
        self.added_layers.append(tree_layer)
        # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —à–∞—Ä –Ω–∞ –≤–µ—Ä—Ö –≥—Ä—É–ø–∏
        self.last_to_first(group) 
    def lines_element2polygone(self, lines_element):
        # –û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç
        """ –§–æ—Ä–º—É—î —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–º–∫–Ω–µ–Ω–æ–≥–æ –ø–æ–ª—ñ–≥–æ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ ULID –ª—ñ–Ω—ñ–π
            —ñ —ó—Ö —Ç–æ—á–æ–∫.

            Parameters:
                lines_element (xml.etree.ElementTree.Element):
                –ï–ª–µ–º–µ–Ω—Ç, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –ø—ñ–¥–µ–ª–µ–º–µ–Ω—Ç–∏ <Line>.

            Returns:
                list: –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–º–∫–Ω–µ–Ω–æ–≥–æ –ø–æ–ª—ñ–≥–æ–Ω—É.
        """

        # log_calls(logFile, f"lines_element = {lines_element.tag}")

        if lines_element is None:
            raise ValueError("lines_element –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ None.")

        # –ó—á–∏—Ç–∞—Ç–∏ –≤—Å—ñ ULID –ª—ñ–Ω—ñ–π
        lines = []

        logstr = ''
        i = 0
        for line in lines_element.findall(".//Line"):
            i += 1
            ulid = line.find("ULID").text
            # logstr += '\n\t' + ulid + '. '+ str(line)
            logstr += '\n\t' + ulid + '. '

            if ulid and ulid in self.qgisLines:
                lines.append((ulid, self.qgisLines[ulid]))
            elif ulid:
                raise ValueError(f"ULID '{ulid}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")
            else:
                raise ValueError("–õ—ñ–Ω—ñ—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—É —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞.")
        # log_calls(logFile, "\n\t   ULID:" + logstr)

        # i = 0
        # for line in lines:
        #     log_msg(logFile, f"lines[{i}][0] = {lines[i][0]}")
        #     log_msg(logFile, f"lines[{i}][1] = {lines[i][1]}")
        #     i += 1



        # –§–æ—Ä–º—É—î–º–æ –∑–∞–º–∫–Ω–µ–Ω–∏–π –ø–æ–ª—ñ–≥–æ–Ω
        if not lines:
            return []

        polygon_coordinates = []
        used_lines = set()
        current_line = lines[0]
        polygon_coordinates.extend(current_line[1])  # –î–æ–¥–∞—Ç–∏ —Ç–æ—á–∫–∏ –ø–µ—Ä—à–æ—ó –ª—ñ–Ω—ñ—ó
        used_lines.add(current_line[0])

        while len(used_lines) < len(lines):
            # –ü–æ—à—É–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ª—ñ–Ω—ñ—ó, —â–æ –∑'—î–¥–Ω—É—î—Ç—å—Å—è
            for ulid, coords in lines:
                if ulid in used_lines:
                    continue
                if coords[0] == polygon_coordinates[-1]:  # –ó'—î–¥–Ω–∞–Ω–Ω—è –∫—ñ–Ω—Ü—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –ª—ñ–Ω—ñ—ó –∑ –ø–æ—á–∞—Ç–∫–æ–º –Ω–∞—Å—Ç—É–ø–Ω–æ—ó
                    polygon_coordinates.extend(coords[1:])
                    used_lines.add(ulid)
                    break
                elif coords[-1] == polygon_coordinates[-1]:  # –ó'—î–¥–Ω–∞–Ω–Ω—è –∫—ñ–Ω—Ü—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –ª—ñ–Ω—ñ—ó –∑ –∫—ñ–Ω—Ü–µ–º –Ω–∞—Å—Ç—É–ø–Ω–æ—ó
                    polygon_coordinates.extend(reversed(coords[:-1]))
                    used_lines.add(ulid)
                    break
            else:
                raise ValueError("–ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–∞–º–∫–Ω–µ–Ω–∏–π –ø–æ–ª—ñ–≥–æ–Ω ‚Äî –¥–µ—è–∫—ñ –ª—ñ–Ω—ñ—ó –Ω–µ –∑'—î–¥–Ω—É—é—Ç—å—Å—è.")

        # –ó–∞–º–∏–∫–∞–Ω–Ω—è –ø–æ–ª—ñ–≥–æ–Ω—É
        if polygon_coordinates[0] != polygon_coordinates[-1]:
            polygon_coordinates.append(polygon_coordinates[0])

        return polygon_coordinates
    def lines_element2polyline(self, lines_element):
        """

        Parameters:
            lines_element (xml.etree.ElementTree.Element):
                –ï–ª–µ–º–µ–Ω—Ç, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –ø—ñ–¥–µ–ª–µ–º–µ–Ω—Ç–∏ <Line>.
            self.qgisLines (dict): –°–ª–æ–≤–Ω–∏–∫, –¥–µ
                –∫–ª—é—á ‚Äî ULID (—É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä),
                –∞ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç [QgsPointXY, QgsPointXY].

        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—ñ–ª—ñ–Ω—ñ—ó.
        """
        # –§–æ—Ä–º—É—î —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—ñ–ª—ñ–Ω—ñ—ó 
        # –Ω–∞ –æ—Å–Ω–æ–≤—ñ ULID –ª—ñ–Ω—ñ–π —Ç–∞ —ó—Ö —Ç–æ—á–æ–∫.
        # –ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ lines_element2polygone, 
        # –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø–æ–ª—ñ–ª—ñ–Ω—ñ—é –Ω–∞ –∑–∞–º–∫–Ω—É—Ç—ñ—Å—Ç—å.
        # –ü–æ–ª—ñ–ª—ñ–Ω—ñ—è –º–æ–∂–µ –±—É—Ç–∏ —è–∫ –∑–∞–º–∫–Ω—É—Ç–æ—é, —Ç–∞–∫ —ñ –Ω–µ–∑–∞–º–∫–Ω—É—Ç–æ—é.
        #‚úîÔ∏è 2025.03.27 13:32
        # –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ add_adjacents
        # –º–∞—î —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ñ
        # –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –æ–±—Ä–æ–±—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—É–º—ñ–∂–Ω–∏–∫—ñ–≤

        # log_calls(logFile)

        if lines_element is None:
            raise ValueError("lines_element –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ None.")

        # –ó—á–∏—Ç–∞—Ç–∏ –≤—Å—ñ ULID –ª—ñ–Ω—ñ–π
        lines = []

        logstr = ''
        i = 0
        for line in lines_element.findall(".//Line"):
            i += 1
            ulid = line.find("ULID").text

            if ulid and ulid in self.qgisLines:
                lines.append((ulid, self.qgisLines[ulid]))
                coords_str = ", ".join([f"{point.x():.2f}, {point.y():.2f}" for point in self.qgisLines[ulid]])
                logstr += f"{i}. {ulid}: {coords_str}\n"
            elif ulid:
                raise ValueError(f"ULID '{ulid}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")
            else:
                raise ValueError("–õ—ñ–Ω—ñ—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—É —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞.")
        if lines_element is None:
            raise ValueError("lines_element –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ None.")

        # –ó—á–∏—Ç–∞—Ç–∏ –≤—Å—ñ ULID –ª—ñ–Ω—ñ–π
        lines = []

        logstr = ''
        i = 0
        for line in lines_element.findall(".//Line"):
            i += 1
            ulid = line.find("ULID").text

            if ulid and ulid in self.qgisLines:
                lines.append((ulid, self.qgisLines[ulid]))
                coords_str = ", ".join([f"{point.x():.2f}, {point.y():.2f}" for point in self.qgisLines[ulid]])
                logstr += f"{i}. {ulid}: {coords_str}\n"
            elif ulid:
                raise ValueError(f"ULID '{ulid}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")
            else:
                raise ValueError("–õ—ñ–Ω—ñ—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—É —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞.")
        # log_msg(logFile, "\nlines: \n" + logstr)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç polyline
        polyline = []

        if not lines:
            # raise ValueError("–ù–µ–º–∞ —Å—É–º—ñ–∂–Ω–∏–∫—ñ–≤.")
            QMessageBox.critical(self, "xml_ua", "–ù–µ–º–∞ —Å—É–º—ñ–∂–Ω–∏–∫—ñ–≤.")
            return None

        # –Ø–∫—â–æ –≤ lines 1 –µ–ª–µ–º–µ–Ω—Ç —ñ polyline –ø—É—Å—Ç–∏–π - –∞–Ω–∫–ª–∞–≤ - –≤–µ—Ä—Ç–∞—î–º–æ lines_element2polygone(lines_element)
        if len(lines) == 1:
            return self.lines_element2polygone(lines_element)

        # –ì–ª–∏–±–æ–∫—ñ –∫–æ–ø—ñ—ó lines[0][1], ..., lines[0][-1] –¥–æ–¥–∞—é—Ç—å—Å—è –≤ –∫—ñ–Ω–µ—Ü—å polyline —É –ø—Ä—è–º–æ–º—É –ø–æ—Ä—è–¥–∫—É
        polyline.extend([QgsPointXY(point.x(), point.y()) for point in lines[0][1]])

        # –í–∏–¥–∞–ª—è—î–º–æ lines[0]
        lines.pop(0)

        # –Ø–∫—â–æ lines –ø—É—Å—Ç–∏–π - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        if not lines:
            return polyline

        while lines:
            found_next_line = False

            # –®—É–∫–∞—î–º–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è polyline[-1] (–∫—ñ–Ω–µ—Ü—å) –∑ –ø–æ—á–∞—Ç–∫–∞–º–∏ –∑–∞–ª–∏—à–∫—É lines[0][1],...lines[-1][1]
            for i, (ulid, coords) in enumerate(lines):
                if coords[0] == polyline[-1]:
                    # –î–æ–¥–∞—î–º–æ —Ç–æ—á–∫–∏, –∫—Ä—ñ–º –ø–µ—Ä—à–æ—ó (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è)
                    polyline.extend([QgsPointXY(point.x(), point.y()) for point in coords[1:]])
                    lines.pop(i)
                    found_next_line = True
                    break

            if found_next_line:
                continue

            # –®—É–∫–∞—î–º–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è polyline[-1] (–∫—ñ–Ω–µ—Ü—å) –∑ –∫—ñ–Ω—Ü—è–º–∏ –∑–∞–ª–∏—à–∫—É lines[0][-1],...lines[-1][-1]
            for i, (ulid, coords) in enumerate(lines):
                if coords[-1] == polyline[-1]:
                    # –î–æ–¥–∞—î–º–æ —Ç–æ—á–∫–∏ –≤ –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –ø–æ—Ä—è–¥–∫—É, –∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ—ó
                    polyline.extend([QgsPointXY(point.x(), point.y()) for point in reversed(coords[:-1])])
                    lines.pop(i)
                    found_next_line = True
                    break

            if found_next_line:
                continue

            # –®—É–∫–∞—î–º–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è polyline[0] (–ø–æ—á–∞—Ç–æ–∫) –∑ –∫—ñ–Ω—Ü—è–º–∏ –∑–∞–ª–∏—à–∫—É lines[0][-1],...lines[-1][-1]
            for i, (ulid, coords) in enumerate(lines):
                if coords[-1] == polyline[0]:
                    # –î–æ–¥–∞—î–º–æ —Ç–æ—á–∫–∏ –≤ –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –ø–æ—Ä—è–¥–∫—É, –∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ—ó
                    polyline = [QgsPointXY(point.x(), point.y()) for point in reversed(coords[:-1])] + polyline
                    lines.pop(i)
                    found_next_line = True
                    break

            if found_next_line:
                continue

            # –®—É–∫–∞—î–º–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è polyline[0] (–ø–æ—á–∞—Ç–æ–∫) –∑ –ø–æ—á–∞—Ç–∫–∞–º–∏ –∑–∞–ª–∏—à–∫—É lines[0][1],...lines[-1][1]
            for i, (ulid, coords) in enumerate(lines):
                if coords[0] == polyline[0]:
                    # –î–æ–¥–∞—î–º–æ —Ç–æ—á–∫–∏, –∫—Ä—ñ–º –ø–µ—Ä—à–æ—ó (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è)
                    polyline = [QgsPointXY(point.x(), point.y()) for point in coords[1:]] + polyline
                    lines.pop(i)
                    found_next_line = True
                    break

            if not found_next_line:
                raise ValueError("–ü–æ–ª—ñ–ª—ñ–Ω—ñ—è –Ω–µ –∑'—î–¥–Ω–∞–Ω–∞.")

        log_str = ""
        log_str_coords = ""
        i = 0
        for coordinate in polyline:
            i += 1
            log_str += f"{i}. {coordinate.x():.2f}, {coordinate.y():.2f}\n"
            log_str_coords += f"{i}. {coordinate} \n"
        # log_msg(logFile, "polyline_coordinates (x, y): \n" + log_str)

        return polyline
    def add_adjacents(self):
        """
        –Ü–º–ø–æ—Ä—Ç—É—î –¥–∞–Ω—ñ –ø—Ä–æ —Å—É–º—ñ–∂–Ω–∏–∫—ñ–≤ –∑ XML-—Ñ–∞–π–ª—É —Ç–∞ –¥–æ–¥–∞—î —ó—Ö —è–∫ –Ω–æ–≤–∏–π —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É QGIS.
        –í—Ä–∞—Ö–æ–≤—É—î —è–∫ –∑–∞–º–∫–Ω—É—Ç—ñ (–∞–Ω–∫–ª–∞–≤–∏), —Ç–∞–∫ —ñ –Ω–µ–∑–∞–º–∫–Ω—É—Ç—ñ –ø–æ–ª—ñ–ª—ñ–Ω—ñ—ó —Å—É–º—ñ–∂–Ω–∏–∫—ñ–≤.
        """
        # log_msg(logFile)

        layer_name = "–°—É–º—ñ–∂–Ω–∏–∫"
        # –í–∏–¥–∞–ª—è—î–º–æ —à–∞—Ä, —è–∫—â–æ –≤—ñ–Ω –≤–∂–µ —ñ—Å–Ω—É—î
        self.removeLayer(layer_name)
        layer = QgsVectorLayer("LineString?crs=" + self.crsEpsg, layer_name, "memory")
        layer.loadNamedStyle(os.path.dirname(__file__) + "/templates/adjacent.qml")
        layer_provider = layer.dataProvider()
        fields = [
            QgsField("CadastralNumber", QVariant.String),
            QgsField("Proprietor", QVariant.String),
        ]
        layer_provider.addAttributes(fields)
        layer.updateFields()

        # –∑–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ª–µ–º–µ–Ω—Ç –°—É–º—ñ–∂–Ω–∏–∫—ñ–≤ —É –¥–µ—Ä–µ–≤—ñ
        adjacents = self.root.find(".//AdjacentUnits")
        if adjacents is None:
            log_msg(logFile, "–†–æ–∑–¥—ñ–ª AdjacentUnits –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –°—É–º—ñ–∂–Ω–∏–∫–∏ –Ω–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ.")
            return

        for adjacent in adjacents.findall(".//AdjacentUnitInfo"):

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Å—É–º—ñ–∂–Ω–∏–∫–∞
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä
            cadastral_number = adjacent.find(".//CadastralNumber").text if adjacent.find(".//CadastralNumber") is not None else None

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–∫–∞
            proprietor = ""
            natural_person = adjacent.find(".//Proprietor/NaturalPerson/FullName")
            legal_entity = adjacent.find(".//Proprietor/LegalEntity")

            if natural_person is not None:
                last_name = natural_person.find("LastName").text if natural_person.find("LastName") is not None else ""
                first_name = natural_person.find("FirstName").text if natural_person.find("FirstName") is not None else ""
                middle_name = natural_person.find("MiddleName").text if natural_person.find("MiddleName") is not None else ""
                proprietor = f"{last_name} {first_name} {middle_name}".strip()
            elif legal_entity is not None:
                proprietor = legal_entity.find("Name").text if legal_entity.find("Name") is not None else ""

            # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–∂—ñ —Å—É–º—ñ–∂–Ω–∏–∫–∞
            boundary_element = adjacent.find(".//AdjacentBoundary/Lines")
            if boundary_element is not None:

                # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–æ–ª—ñ–ª—ñ–Ω—ñ—ó
                try:
                    boundary_coords = self.lines_element2polyline(boundary_element)
                except ValueError as e:
                    log_msg(logFile, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—É–º—ñ–∂–Ω–∏–∫–∞ {cadastral_number}: {e}")
                    continue

                logstr = ''
                i = 0
                for point in boundary_coords:
                    i += 1
                    logstr += f"\n\t {str(i)}. {point.x():.2f}, {point.y():.2f}"
                # log_msg(logFile, f"\n{proprietor}: " + logstr + "\n")

                if len(boundary_coords) >= 2:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ QgsLineString –∑ QgsPointXY
                    # line_string = QgsLineString([QgsPointXY(point.x(), point.y()) for point in boundary_coords])
                    line_string = QgsLineString([QgsPointXY(point.y(), point.x()) for point in boundary_coords])
                    feature = QgsFeature()
                    feature.setGeometry(QgsGeometry(line_string))
                    feature.setAttributes([cadastral_number, proprietor])
                    layer_provider.addFeature(feature)
                elif len(boundary_coords) == 1:
                    log_msg(logFile, f"–°—É–º—ñ–∂–Ω–∏–∫–∞ {cadastral_number} –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –æ–¥–Ω—ñ—î—ó —Ç–æ—á–∫–∏")
                else:
                    log_msg(logFile, f"–°—É–º—ñ–∂–Ω–∏–∫–∞ {cadastral_number} –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –º–µ–∂—ñ")

            else:
                log_msg(logFile, f"–î–ª—è —Å—É–º—ñ–∂–Ω–∏–∫–∞ {cadastral_number} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç AdjacentBoundary/Lines")

        QgsProject.instance().addMapLayer(layer, False)  # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É, –∞–ª–µ –Ω–µ –¥–æ –¥–µ—Ä–µ–≤–∞ —à–∞—Ä—ñ–≤
        tree_layer = QgsLayerTreeLayer(layer)
        # Get the group directly or create it if it doesn't exist:
        group = self.layers_root.findGroup(self.group_name)
        if group is None:
            group = self.layers_root.addGroup(self.group_name)

        # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –≥—Ä—É–ø–∏
        self.group.addChildNode(tree_layer) 
        # log_msg(logFile, f"–î–æ–¥–∞–Ω–æ —à–∞—Ä {layer.name()}")
        # –°—Ç–∞—Ä–∞ –º–æ–¥–µ–ª—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
        #if self.plugin: self.plugin.connect_layer_signals_for_layer(layer)
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —à–∞—Ä—ñ–≤ 
        self.added_layers.append(tree_layer)
        # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —à–∞—Ä –Ω–∞ –≤–µ—Ä—Ö –≥—Ä—É–ø–∏
        self.last_to_first(group)

        layer.updateExtents()
        layer.triggerRepaint()
    def display_test_line(self):
        """
        –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç–µ—Å—Ç–æ–≤—É –ª—ñ–Ω—ñ—é –Ω–∞ –ø–æ–ª–æ—Ç–Ω—ñ QGIS.
        """
        log_calls(logFile)

        layer_name = "–¢–µ—Å—Ç–æ–≤–∞ –ª—ñ–Ω—ñ—è"
        self.removeLayer(layer_name)

        layer = QgsVectorLayer("LineString?crs=" + self.crsEpsg, layer_name, "memory")
        layer.loadNamedStyle(os.path.dirname(__file__) + "/templates/lines.qml")
        layer_provider = layer.dataProvider()

        # –¢–æ—á–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ—ó –ª—ñ–Ω—ñ—ó
        points = [
            QgsPointXY(5428619.05, 1260119.11),
            QgsPointXY(5428738.27, 1260179.85),
            QgsPointXY(5428888.77, 1260251.91),
            QgsPointXY(5428926.86, 1260196.32),
            QgsPointXY(5428934.09, 1260193.32),
        ]

        # –°—Ç–≤–æ—Ä—é—î–º–æ QgsLineString
        line_string = QgsLineString(points)

        # –°—Ç–≤–æ—Ä—é—î–º–æ QgsFeature
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry(line_string))

        # –î–æ–¥–∞—î–º–æ QgsFeature –¥–æ —à–∞—Ä—É
        layer_provider.addFeature(feature)

        # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –ø—Ä–æ–µ–∫—Ç—É
        QgsProject.instance().addMapLayer(layer, False)
        tree_layer = QgsLayerTreeLayer(layer)
        group = self.layers_root.findGroup(self.group_name)
        if group is None:
            group = self.layers_root.addGroup(self.group_name)

        # –î–æ–¥–∞—î–º–æ —à–∞—Ä –¥–æ –≥—Ä—É–ø–∏
        self.group.addChildNode(tree_layer) 
        log_msg(logFile, f"–î–æ–¥–∞–Ω–æ —à–∞—Ä {layer.name()}")
        # –°—Ç–∞—Ä–∞ –º–æ–¥–µ–ª—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —à–∞—Ä—É
        #if self.plugin: self.plugin.connect_layer_signals_for_layer(layer)
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —à–∞—Ä—ñ–≤ 
        self.added_layers.append(tree_layer)
        # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —à–∞—Ä –Ω–∞ –≤–µ—Ä—Ö –≥—Ä—É–ø–∏
        self.last_to_first(group) 

        # –û–Ω–æ–≤–ª—é—î–º–æ –µ–∫—Å—Ç–µ–Ω—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ —à–∞—Ä
        layer.updateExtents()
        layer.triggerRepaint()
