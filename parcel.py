# -*- coding: utf-8 -*-
"""–¢–∞–±–ª–∏—Ü—è –¥–∞–Ω–∏—Ö –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏"""
import os
import uuid

from datetime import datetime
from lxml import etree

from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtCore import QDate
from qgis.PyQt.QtCore import QModelIndex

from qgis.PyQt.QtWidgets import QDialog
from qgis.PyQt.QtWidgets import QInputDialog
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.PyQt.QtWidgets import QMenu
from qgis.PyQt.QtWidgets import QTabWidget

from qgis.PyQt.QtWidgets import QTableView
from qgis.PyQt.QtGui import QStandardItem
from qgis.PyQt.QtGui import QStandardItemModel
from qgis.PyQt.QtCore import pyqtSignal

from .date_dialog import DateInputDialog

from .common import logFile
from .common import log_msg
from .common import log_calls
from .common import config
from .common import config_docs
from .common import connector

from .person import TableViewNaturalPerson
from .entity import TableViewLegalEntity

class TableViewParcel(QTableView):
    """
        –ö–ª–∞—Å —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏.
    """

    # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    parcelChangedSignal = pyqtSignal(str, str)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö

    # –ö–ª–∞—Å TableViewParcel —É—Å–ø–∞–¥–∫–æ–≤—É—î –∫–ª–∞—Å QTableView
    # –∑–∞–ø–æ–≤–Ω—é—î —Ç–∞–±–ª–∏—Ü—é –î—ñ–ª—è–Ω–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏
    # –¥–ª—è –¥–∞–Ω–∏—Ö, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö –∫—ñ–ª—å–∫–æ—Å—Ç—è—Ö –≤—ñ–¥ 0 –¥–æ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—Å—Ç—ñ
    # –∑–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö


    def __init__(self, parent=None):

        super().__init__(parent)

        # –Ø–≤–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –æ–±'—î–∫—Ç
        self.parent = parent
        self.parcel_block_change_flag = False
        # log_calls(logFile, f"üö© {self.parcel_block_change_flag}")

        # –ó–º—ñ–Ω–∏—Ç–∏ –≤–∏—Å–æ—Ç—É –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        self.horizontalHeader().setFixedHeight(30)
        self.verticalHeader().setDefaultSectionSize(30)

        self.items_model = QStandardItemModel()
        self.setModel(self.items_model)
        self.items_model.setHorizontalHeaderLabels(["–ï–ª–µ–º–µ–Ω—Ç", "–ó–Ω–∞—á–µ–Ω–Ω—è"])

        self.empty_elents = []
        self.docs_dict = dict(config_docs['DocsList'])
        self.docs_tips = dict(config_docs['DocsTips'])

        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª—ñ–∫—É
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∑–º—ñ–Ω –¥–∞–Ω–∏—Ö —É –∫–æ–º—ñ—Ä–∫–∞—Ö
        #self.items_model.itemChanged.connect(self.parcel_item_changed)
        connector.connect(self.items_model, "itemChanged", self.parcel_item_changed)


    def parcel_item_changed(self, cell):
        """ –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó –∑–º—ñ–Ω–∏ –∫–æ–º—ñ—Ä–æ–∫ QStandardcellModel

            –í–∏–∑–Ω–∞—á–∞—î full_path, value –∫–æ–º—ñ—Ä–∫–∏ –¥–µ –∑–º—ñ–Ω–∏–ª–∏—Å—å –¥–∞–Ω—ñ —ñ
            —Ñ–æ—Ä–º—É—î —Å–∏–≥–Ω–∞–ª dataChangedInparcel = pyqtSignal(str, str)
        """

        log_msg(logFile, f"{cell.text()}")
        log_msg(logFile, f"parcel_block_change_flag = {self.parcel_block_change_flag}")
        if self.parcel_block_change_flag:
            log_msg(logFile, f"parcel_block_change_flag = {self.parcel_block_change_flag} - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
            return

        log_msg(logFile, f"–≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ parcel_block_change_flag –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –∑–∞ –º–µ–∂–∞–º–∏ —Ñ—É–Ω–∫—Ü—ñ—ó —ñ –≤–∏–∫–æ–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        self.parcel_block_change_flag = True

        try:
            value = cell.text()
            full_path = cell.data(Qt.UserRole)
            tag = full_path.split("/")[-1]
            log_msg(logFile,f"—Ç–µ–≥ –∫–æ–º—ñ—Ä–∫–∏: {tag}")
            log_msg(logFile, "–ü–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ —Ñ—É–Ω–∫—Ü—ñ—ó tree_XXXXX_update()")
        finally:
            self.parcel_block_change_flag = False
            log_msg(logFile, f"–°–∫–∏–¥–∞–Ω–Ω—è —Ñ–ª–∞–≥—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω parcel_block_change_flag = {self.parcel_block_change_flag}")
            pass


    def add_region(self, xml_tree, path):

        element = xml_tree.find(".//ParcelLocationInfo/Region")
        if element is not None:
            value = element.text
            key_item = QStandardItem("–†–µ–≥—ñ–æ–Ω")
            key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
            key_item.setToolTip(
                "–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏<br>"
                "<b>–û–±–ª–∞—Å—Ç—å –∞–±–æ –º—ñ—Å—Ç–æ —Ä–µ—Å–ø—É–±–ª—ñ–∫–∞–Ω—Å—å–∫–æ–≥–æ –ø—ñ–¥–ø–æ—Ä—è–¥–∫—É–≤–∞–Ω–Ω—è) </b> <br>"
                "–ï–ª–µ–º–µ–Ω—Ç Region"
            )
            value_item = QStandardItem(value)
            value_item.setData(path, Qt.UserRole)
            self.items_model.appendRow([key_item, value_item])


    def add_settlement(self, xml_tree, path):

        element = xml_tree.find(".//ParcelLocationInfo/Settlement")
        if element is not None:
            value = element.text
            key_item = QStandardItem("–ù–∞–∑–≤–∞ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É")
            key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
            key_item.setToolTip(
                "–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏<br>"
                "<b>–ù–∞–∑–≤–∞ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É</b> <br>"
                "–ï–ª–µ–º–µ–Ω—Ç Settlement<br>"
                "–ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –¥–ª—è XSD –≤–µ—Ä—Å—ñ—ó 0.7<br>"
            )
            value_item = QStandardItem(value)
            value_item.setData(path, Qt.UserRole)
            key_item.setData(path, Qt.UserRole)
            self.items_model.appendRow([key_item, value_item])
    def add_district(self, xml_tree, path):
        element = xml_tree.find(".//ParcelLocationInfo/District")
        if element is not None:
            value = element.text
            key_item = QStandardItem("–ù–∞–∑–≤–∞ —Ä–∞–π–æ–Ω—É")
            key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
            key_item.setToolTip(
                "–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏<br>"
                "<b>–ù–∞–∑–≤–∞ —Ä–∞–π–æ–Ω—É</b> <br>"
                "–ï–ª–µ–º–µ–Ω—Ç District<br>"
                "–ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –¥–ª—è XSD –≤–µ—Ä—Å—ñ—ó 0.7<br>"
            )
            value_item = QStandardItem(value)
            value_item.setData(path, Qt.UserRole)
            key_item.setData(path, Qt.UserRole)
            self.items_model.appendRow([key_item, value_item])
    def add_parcel_location(self, xml_tree, path):
        element = xml_tree.find(".//ParcelLocationInfo/ParcelLocation")
        if element is not None:
            value = "–ó–∞ –º–µ–∂–∞–º–∏ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É" if element.find("Rural") is not None else "–£ –º–µ–∂–∞—Ö –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É"
            where = "Rural" if element.find("Rural") is not None else "Urban"
            key_item = QStandardItem("–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –¥—ñ–ª—è–Ω–∫–∏")
            key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
            key_item.setToolTip(
                "–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏<br>"
                "<b>–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É</b> <br>"
                "–≤ –º–µ–∂–∞—Ö —á–∏ –∑–∞ –º–µ–∂–∞–º–∏ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É<br>"
                "–ï–ª–µ–º–µ–Ω—Ç ParcelLocation<br>"
            )
            value_item = QStandardItem(value)
            value_item.setData(where, Qt.UserRole)
            key_item.setData(path, Qt.UserRole)
            self.items_model.appendRow([key_item, value_item])
    def add_street_type(self, xml_tree, path):
        element = xml_tree.find(".//ParcelAddress/StreetType")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–¢–∏–ø –ø—Ä–æ—ó–∑–¥—É")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–¢–∏–ø –ø—Ä–æ—ó–∑–¥—É (–≤—É–ª–∏—Ü—è, –ø—Ä–æ—Å–ø–µ–∫—Ç, –ø—Ä–æ–≤—É–ª–æ–∫,</b> <br>"
            "—É—Ä–æ—á–∏—â–µ, —Ç—É–ø–∏–∫, –æ—Å—Ç—Ä—ñ–≤...)<br>"
            "–¥–µ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∞ –∑–µ–º–µ–ª—å–Ω–∞ –¥—ñ–ª—è–Ω–∫–∞<br>"
            "(–º–æ–∂–Ω–∞ –Ω–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏, —è–∫—â–æ –¥—ñ–ª—è–Ω–∫–∞ –∑–∞ –º–µ–∂–∞–º–∏ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É)"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_street_name(self, xml_tree, path):
        element = xml_tree.find(".//ParcelAddress/StreetName")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–ù–∞–∑–≤–∞ –≤—É–ª–∏—Ü—ñ")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–ù–∞–∑–≤–∞ –≤—É–ª–∏—Ü—ñ</b> <br>"
            "(–º–æ–∂–Ω–∞ –Ω–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏, —è–∫—â–æ –¥—ñ–ª—è–Ω–∫–∞ –∑–∞ –º–µ–∂–∞–º–∏ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É)"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_building(self, xml_tree, path):
        element = xml_tree.find(".//ParcelAddress/Building")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–ù–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–ù–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É</b> <br>"
            "(–º–æ–∂–Ω–∞ –Ω–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏, —è–∫—â–æ –¥—ñ–ª—è–Ω–∫–∞ –∑–∞ –º–µ–∂–∞–º–∏ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É)"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_block(self, xml_tree, path):
        element = xml_tree.find(".//ParcelAddress/Block")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–ù–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å—É")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–ù–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å—É</b> <br>"
            "(–º–æ–∂–Ω–∞ –Ω–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏)"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_additional_info(self, xml_tree, path):
        element = xml_tree.find(".//ParcelLocationInfo/AdditionalInfoBlock/AdditionalInfo")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</b> <br>"
            "(–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_category(self, xml_tree, path):
        element = xml_tree.find(".//CategoryPurposeInfo/Category")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–µ–º–µ–ª—å")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–µ–º–µ–ª—å</b> <br>"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_purpose(self, xml_tree, path):
        element = xml_tree.find(".//CategoryPurposeInfo/Purpose")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–¶—ñ–ª—å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–¶—ñ–ª—å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è) –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏</b> <br>"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_use(self, xml_tree, path):
        """ –î–æ–¥–∞—î –¥–æ —Ç–∞–±–ª–∏—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –µ–ª–µ–º–µ–Ω—Ç Use –∑ xml_tree """
        # log_msg(logFile, f"path = {path}")
        element = xml_tree.find(".//CategoryPurposeInfo/Use")
        # log_msg(logFile, f"element = {element}")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        # log_msg(logFile, f"Use value = {value}")
        key_item = QStandardItem("–¶—ñ–ª—å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–¶—ñ–ª—å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è) –∑–≥—ñ–¥–Ω–æ —ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º,</b><br>"
            "—â–æ —î –ø—ñ–¥—Å—Ç–∞–≤–æ—é –¥–ª—è –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–∞–≤–∞<br>"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_code(self, xml_tree, path):
        """ –î–æ–¥–∞—î –¥–æ —Ç–∞–±–ª–∏—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –µ–ª–µ–º–µ–Ω—Ç Code –∑ xml_tree """
        # log_msg(logFile, f"path = {path}")
        element = xml_tree.find(".//OwnershipInfo/Code")
        # log_msg(logFile, f"element = {element}")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        # log_msg(logFile, f"value = {value}")
        key_item = QStandardItem("–ö–æ–¥ —Ñ–æ—Ä–º–∏ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–ö–æ–¥ —Ñ–æ—Ä–º–∏ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –Ω–∞ –∑–µ–º–µ–ª—å–Ω—É –¥—ñ–ª—è–Ω–∫—É</b><br>"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_description(self, xml_tree, path):
        """ –î–æ–¥–∞—î –¥–æ —Ç–∞–±–ª–∏—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –µ–ª–µ–º–µ–Ω—Ç Description –∑ xml_tree """
        # log_msg(logFile, f"path = {path}")
        element = xml_tree.find(".//ParcelMetricInfo/Description")
        # log_msg(logFile, f"element = {element}")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        # log_msg(logFile, f"value = {value}")
        key_item = QStandardItem("–û–ø–∏—Å –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–û–ø–∏—Å –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏</b><br>"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_measurement_unit(self, xml_tree, path):
        """ –î–æ–¥–∞—î –¥–æ —Ç–∞–±–ª–∏—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –µ–ª–µ–º–µ–Ω—Ç MeasurementUnit –∑ xml_tree """
        element = xml_tree.find(".//Area/MeasurementUnit")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É –ø–ª–æ—â—ñ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏</b><br>"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_size(self, xml_tree, path):
        """ –î–æ–¥–∞—î –¥–æ —Ç–∞–±–ª–∏—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –µ–ª–µ–º–µ–Ω—Ç Size –∑ xml_tree """
        element = xml_tree.find(".//Area/Size")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–†–æ–∑–º—ñ—Ä")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–†–æ–∑–º—ñ—Ä –ø–ª–æ—â—ñ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏</b><br>"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_determination_method(self, xml_tree, path):
        """ –î–æ–¥–∞—î –¥–æ —Ç–∞–±–ª–∏—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –µ–ª–µ–º–µ–Ω—Ç DeterminationMethod –∑ xml_tree """
        element = xml_tree.find(".//Area/DeterminationMethod")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–ú–µ—Ç–æ–¥ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–ú–µ—Ç–æ–¥ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏</b><br>"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
        self.resizeColumnToContents(0)
    def add_determination_method(self, xml_tree, path):
        """ –î–æ–¥–∞—î –¥–æ —Ç–∞–±–ª–∏—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –µ–ª–µ–º–µ–Ω—Ç DeterminationMethod –∑ xml_tree """
        element = xml_tree.find(".//Area/DeterminationMethod")
        if element is not None:
            if element.find("ExhangeFileCoordinates") is not None:
                value = "–ó–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –æ–±–º—ñ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª—É"
            elif element.find("DocExch") is not None:
                value = "–ó–≥—ñ–¥–Ω–æ —ñ–∑ –ø—Ä–∞–≤–æ–≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞–ª—å–Ω–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"
            elif element.find("Calculation") is not None:
                value = "–ü–µ—Ä–µ–æ–±—á–∏—Å–ª–µ–Ω–Ω—è"
            else:
                value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–ú–µ—Ç–æ–¥ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–ú–µ—Ç–æ–¥ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏</b><br>"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_error(self, xml_tree, path):
        """ –î–æ–¥–∞—î –¥–æ —Ç–∞–±–ª–∏—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –µ–ª–µ–º–µ–Ω—Ç Error –∑ xml_tree """
        element = xml_tree.find(".//ParcelMetricInfo/Error")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–ü–æ–º–∏–ª–∫–∞")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip(
            "<b>–ü–æ–º–∏–ª–∫–∞</b><br>"
        )
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_state_act_type(self, xml_tree, path):
        element = xml_tree.find(".//StateActInfo/StateActType")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–¢–∏–ø –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ –∞–∫—Ç—É")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip("<b>–¢–∏–ø –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ –∞–∫—Ç—É</b><br>")
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_state_act_series(self, xml_tree, path):
        element = xml_tree.find(".//StateActInfo/StateActForm/Series")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–°–µ—Ä—ñ—è –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ –∞–∫—Ç—É")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip("<b>–°–µ—Ä—ñ—è –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ –∞–∫—Ç—É</b><br>")
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_state_act_number(self, xml_tree, path):
        element = xml_tree.find(".//StateActInfo/StateActForm/Number")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–ù–æ–º–µ—Ä –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ –∞–∫—Ç—É")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip("<b>–ù–æ–º–µ—Ä –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ –∞–∫—Ç—É</b><br>")
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_registration_book_number(self, xml_tree, path):
        element = xml_tree.find(".//StateActRegistrationInfo/RegistrationBookNumber")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–ù–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ—ó –∫–Ω–∏–≥–∏")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip("<b>–ù–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ—ó –∫–Ω–∏–≥–∏</b><br>")
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_section_number(self, xml_tree, path):
        element = xml_tree.find(".//StateActRegistrationInfo/SectionNumber")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–ù–æ–º–µ—Ä —Ä–æ–∑–¥—ñ–ª—É")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip("<b>–ù–æ–º–µ—Ä —Ä–æ–∑–¥—ñ–ª—É</b><br>")
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_registration_number(self, xml_tree, path):
        element = xml_tree.find(".//StateActRegistrationInfo/RegistrationNumber")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip("<b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä</b><br>")
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_registration_date(self, xml_tree, path):
        element = xml_tree.find(".//StateActRegistrationInfo/RegistrationDate")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip("<b>–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó</b><br>")
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_signed_by_name(self, xml_tree, path):
        elements = xml_tree.findall(".//SignedByName")
        for i, element in enumerate(elements):
            last_name = element.find("LastName").text if element.find("LastName") is not None else ""
            first_name = element.find("FirstName").text if element.find("FirstName") is not None else ""
            middle_name = element.find("MiddleName").text if element.find("MiddleName") is not None else ""
            full_name = f"{last_name} {first_name} {middle_name}".strip()
            
            key_item = QStandardItem("–ü–Ü–ë –æ—Å–æ–±–∏, —è–∫–∞ –ø—ñ–¥–ø–∏—Å–∞–ª–∞ –¥–µ—Ä–∂–∞–Ω–∏–π –∞–∫—Ç")
            key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
            if i == 0:
                key_item.setToolTip("<b>–ü–Ü–ë –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∞ –æ—Ä–≥–∞–Ω—É –î–µ–∂–∫–æ–º–∑–µ–º—É,</b><br>—è–∫–∏–π –ø—ñ–¥–ø–∏—Å–∞–≤ –¥–µ—Ä–∂–∞–≤–Ω–∏–π –∞–∫—Ç")
            else:
                key_item.setToolTip("<b>–ü–Ü–ë –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∞ –º—ñ—Å—Ü–µ–≤–æ—ó –≤–ª–∞–¥–∏,</b><br>—è–∫–∏–π –ø—ñ–¥–ø–∏—Å–∞–≤ –¥–µ—Ä–∂–∞–≤–Ω–∏–π –∞–∫—Ç")
            value_item = QStandardItem(full_name)
            value_item.setData(path, Qt.UserRole)
            key_item.setData(path, Qt.UserRole)
            self.items_model.appendRow([key_item, value_item])
    def add_delivery_date(self, xml_tree, path):
        element = xml_tree.find(".//StateActInfo/DeliveryDate")
        if element is not None:
            value = element.text
        else:
            self.empty_elents.append(path)
            value = ""
        key_item = QStandardItem("–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ")
        key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
        key_item.setToolTip("<b>–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ –∞–∫—Ç—É</b><br>")
        value_item = QStandardItem(value)
        value_item.setData(path, Qt.UserRole)
        key_item.setData(path, Qt.UserRole)
        self.items_model.appendRow([key_item, value_item])
    def add_legal_mode_info(self, xml_tree, path):
        """
        Adds legal mode information to the provided XML tree and updates the UI with the relevant data.
        Parameters:
        xml_tree (ElementTree): The XML tree containing the legal mode information.
        path (str): The file path associated with the XML tree.
        This method performs the following steps:
        1. Finds the "LegalModeInfo" element in the XML tree.
        2. If found, creates a new tab in the QTabWidget for displaying legal mode information.
        3. Populates the tab with the legal mode type, start date, and expiration date.
        4. Iterates through users and grantors, adding tabs for each natural person or legal entity found.
        The tabs are labeled and tooltips are set to provide additional information about the legal mode and users/grantors.
        """
        # log_msg(logFile, f"Start")
        element = xml_tree.find(".//LegalModeInfo")
        # log_msg(logFile, f"element.tag = {element.tag}")
        if element is not None:
            tab_widget = self.parent.findChild(QTabWidget, "tabWidget")
            if not tab_widget:
                log_msg(logFile, "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ QTabWidget —É xml_uaDockWidget")
                return

            legal_mode_tab = QTableView(self.parent)
            legal_mode_model = QStandardItemModel()
            legal_mode_tab.setModel(legal_mode_model)
            legal_mode_model.setHorizontalHeaderLabels(["–ï–ª–µ–º–µ–Ω—Ç", "–ó–Ω–∞—á–µ–Ω–Ω—è"])
    
            legal_mode_type = element.find("LegalModeType")
            start_date = element.find("Duration/StartDate")
            # –õ–æ–≥—É—î–º–æ start_date
            # log_msg(logFile, f"start_date = {start_date.tag}")
            expiration_date = element.find("Duration/ExpirationDate")
            # –õ–æ–≥—É—î–º–æ expiration_date
            # log_msg(logFile, f"expiration_date = {expiration_date.tag}")
            # expiration_date = None
    
            if legal_mode_type is not None:
                key_item = QStandardItem("–¢–∏–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è")
                key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
                value_item = QStandardItem(legal_mode_type.text)
                value_item.setData(path, Qt.UserRole)
                legal_mode_model.appendRow([key_item, value_item])
    
            if start_date is not None:
                key_item = QStandardItem("–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É")
                key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
                value_item = QStandardItem(start_date.text)
                value_item.setData(path, Qt.UserRole)
                legal_mode_model.appendRow([key_item, value_item])
    
            if expiration_date is not None:
                key_item = QStandardItem("–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è")
                key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
                value_item = QStandardItem(expiration_date.text)
                value_item.setData(path, Qt.UserRole)
                legal_mode_model.appendRow([key_item, value_item])
    
            index = tab_widget.addTab(legal_mode_tab, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è")
            tab_widget.setTabToolTip(index, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –∑–µ–º–µ–ª—å–Ω–æ—é –¥—ñ–ª—è–Ω–∫–æ—é")
    
            users = element.findall(".//Grantee")
            for user in users:
                # auth_element = user.find("Authentication")
                # log_msg(logFile, f"auth_element.tag = {auth_element.tag}")
                # if auth_element is not None:
                    if user.find("NaturalPerson") is not None:
                        person = user.find("NaturalPerson")
                        full_name_node = person.find("FullName")
                        if full_name_node is not None:
                            last_name = full_name_node.find("LastName").text if full_name_node.find("LastName") is not None else ""
                            first_name = full_name_node.find("FirstName").text if full_name_node.find("FirstName") is not None else ""
                            middle_name = full_name_node.find("MiddleName").text if full_name_node.find("MiddleName") is not None else ""
                            full_name = f"{last_name} {first_name[:1]}.{middle_name[:1]}.".strip()
                        else:
                            full_name = "–ë–µ–∑ —ñ–º–µ–Ω—ñ"
    
                        tab_name = full_name
                        new_tab = TableViewNaturalPerson(self.parent)
                        new_tab.populate_natural_person(xml_tree, user, person)
                        index = tab_widget.addTab(new_tab, tab_name)
                        tab_widget.setTabToolTip(index, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏")
    
                    elif user.find("LegalEntity") is not None:
                        entity = user.find("LegalEntity")
                        entity_name = entity.find("Name").text if entity.find("Name") is not None else "–ë–µ–∑ –Ω–∞–∑–≤–∏"
    
                        tab_name = entity_name
                        new_tab = TableViewLegalEntity(self.parent)
                        new_tab.populate_legal_entity(xml_tree, ".//Grantee/LegalEntity")
                        index = tab_widget.addTab(new_tab, tab_name)
                        tab_widget.setTabToolTip(index, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏")
    
            grantors = element.findall(".//Grantor")
            for grantor in grantors:
                # auth_element = grantor.find("Authentication")
                # if auth_element is not None:
                # log_msg(logFile, f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–¥–∞–≤–∞—á—ñ–≤: {len(grantors)}")
                if grantor.find("NaturalPerson") is not None:
                    log_msg(logFile, "–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–¥–∞–≤–∞—á NaturalPerson")
                    person = grantor.find("NaturalPerson")
                    full_name_node = person.find("FullName")
                    if full_name_node is not None:
                        last_name = full_name_node.find("LastName").text if full_name_node.find("LastName") is not None else ""
                        first_name = full_name_node.find("FirstName").text if full_name_node.find("FirstName") is not None else ""
                        middle_name = full_name_node.find("MiddleName").text if full_name_node.find("MiddleName") is not None else ""
                        full_name = f"{last_name} {first_name[:1]}.{middle_name[:1]}.".strip()
                    else:
                        full_name = "–ë–µ–∑ —ñ–º–µ–Ω—ñ"
    
                    tab_name = full_name
                    new_tab = TableViewNaturalPerson(self.parent)
                    new_tab.populate_natural_person(xml_tree, grantor, person)
                    index = tab_widget.addTab(new_tab, tab_name)
                    tab_widget.setTabToolTip(index, "–ù–∞–¥–∞–≤–∞—á –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏")

                elif grantor.find("LegalEntity") is not None:
                    # log_msg(logFile, "–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–¥–∞–≤–∞—á LegalEntity")
                    entity = grantor.find("LegalEntity")
                    entity_name = entity.find("Name").text if entity.find("Name") is not None else "–ë–µ–∑ –Ω–∞–∑–≤–∏"
                    # log_msg(logFile, f"entity_name = {entity_name}")
                    tab_name = entity_name
                    new_tab = TableViewLegalEntity(self.parent)
                    new_tab.populate_legal_entity(xml_tree, ".//Grantor/LegalEntity")
                    index = tab_widget.addTab(new_tab, tab_name)
                    tab_widget.setTabToolTip(index, "–ù–∞–¥–∞–≤–∞—á –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏")    
    def fill_parcel_data(self, xmlTree):
        """ –ó–∞–ø–æ–≤–Ω—é—î —Ç–∞–±–ª–∏—Ü—é –¥–∞–Ω–∏–º–∏, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø—ñ–¥–∫–∞–∑–∫–∏
            –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
                xmlTree: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–µ –¥–µ—Ä–µ–≤–æ xml
        """
        # log_msg(logFile, f"xmlTree = {xmlTree}")
        self.items_model.removeRows(0, self.items_model.rowCount())
        paths = config.get("Parcel", "paths").splitlines()
        self.empty_elents = []
        for path in paths:
            tag = path.split("/")[-1]
            # log_msg(logFile, f"tag = {tag}")
            if tag == "Region": 
                self.add_region(xmlTree, path)
                continue
            if tag == "Settlement":
                self.add_settlement(xmlTree, path)
                continue
            if tag == "District":
                self.add_district(xmlTree, path)
                continue
            if tag == "ParcelLocation":
                self.add_parcel_location(xmlTree, path)
                continue
            if tag == "StreetType":
                self.add_street_type(xmlTree, path)
                continue
            if tag == "StreetName":
                self.add_street_name(xmlTree, path)
                continue
            if tag == "Building":
                self.add_building(xmlTree, path)
                continue
            if tag == "Block":
                self.add_block(xmlTree, path)
                continue
            if tag == "AdditionalInfo":
                # log_msg(logFile, f"AdditionalInfo path = {path}")
                self.add_additional_info(xmlTree, path)
                continue
            if tag == "Category":
                self.add_category(xmlTree, path)
                continue
            if tag == "Purpose":
                self.add_purpose(xmlTree, path)
                continue
            if tag == "Use":
                self.add_use(xmlTree, path)
                continue
            if tag == "Code":
                self.add_code(xmlTree, path)
                continue
            if tag == "Description":
                self.add_description(xmlTree, path)
                continue
            if tag == "MeasurementUnit":
                self.add_measurement_unit(xmlTree, path)
                continue
            if tag == "Size":
                self.add_size(xmlTree, path)
                continue
            if tag == "DeterminationMethod":
                self.add_determination_method(xmlTree, path)
                continue
            if tag == "Error":
                self.add_error(xmlTree, path)
                continue
            if tag == "StateActType":
                self.add_state_act_type(xmlTree, path)
                continue
            if tag == "Series":
                self.add_state_act_series(xmlTree, path)
                continue
            if tag == "Number":
                self.add_state_act_number(xmlTree, path)
                continue
            if tag == "RegistrationBookNumber":
                self.add_registration_book_number(xmlTree, path)
                continue
            if tag == "SectionNumber":
                self.add_section_number(xmlTree, path)
                continue
            if tag == "RegistrationNumber":
                self.add_registration_number(xmlTree, path)
                continue
            if tag == "RegistrationDate":
                self.add_registration_date(xmlTree, path)
                continue
            if tag == "LastName":
                self.add_signed_by_name(xmlTree, path)
                continue
            if tag == "DeliveryDate":
                self.add_delivery_date(xmlTree, path)
                continue
            if tag == "Proprietors":
                proprietors = xmlTree.findall(".//Proprietors/ProprietorInfo")
                tab_widget = self.parent.findChild(QTabWidget, "tabWidget")

                if not tab_widget:
                    log_msg(logFile, "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ QTabWidget —É xml_uaDockWidget")
                else:
                    existing_tabs = [tab_widget.tabText(i) for i in range(tab_widget.count())]

                    for proprietor in proprietors:
                        auth_element = proprietor.find("Authentication")
                        if auth_element is not None:
                            if auth_element.find("NaturalPerson") is not None:
                                person = auth_element.find("NaturalPerson")
                                full_name_node = person.find("FullName")
                                if full_name_node is not None:
                                    last_name = full_name_node.find("LastName").text if full_name_node.find("LastName") is not None else ""
                                    first_name = full_name_node.find("FirstName").text if full_name_node.find("FirstName") is not None else ""
                                    middle_name = full_name_node.find("MiddleName").text if full_name_node.find("MiddleName") is not None else ""
                                    full_name = f"{last_name} {first_name[:1]}.{middle_name[:1]}.".strip()
                                else:
                                    full_name = "–ë–µ–∑ —ñ–º–µ–Ω—ñ"

                                tab_name = full_name if full_name not in existing_tabs else f"{full_name} ({existing_tabs.count(full_name) + 1})"
                                new_tab = TableViewNaturalPerson(self.parent)
                                # person -> .//ProprietorInfo/Authentication/NaturalPerson
                                new_tab.populate_natural_person(xmlTree, proprietor, person)
                                index = tab_widget.addTab(new_tab, tab_name)
                                tab_widget.setTabToolTip(index, f"–í–ª–∞—Å–Ω–∏–∫ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏")
                                # log_msg(logFile, f"‚úîÔ∏è –°—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ —ñ–º'—è –≤–∫–ª–∞–¥–∫–∏: {tab_name}")

                            elif auth_element.find("LegalEntity") is not None:
                                entity = auth_element.find("LegalEntity")
                                entity_name = entity.find("Name").text if entity.find("Name") is not None else "–ë–µ–∑ –Ω–∞–∑–≤–∏"

                                tab_name = entity_name if entity_name not in existing_tabs else f"{entity_name} ({existing_tabs.count(entity_name) + 1})"
                                new_tab = TableViewLegalEntity(self.parent)
                                new_tab.populate_legal_entity(xmlTree, ".//ProprietorInfo/Authentication/LegalEntity")
                                index = tab_widget.addTab(new_tab, tab_name)
                                tab_widget.setTabToolTip(index, f"–í–ª–∞—Å–Ω–∏–∫ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏")
                                # log_msg(logFile, f"‚úîÔ∏è –°—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ —ñ–º'—è –≤–∫–ª–∞–¥–∫–∏: {tab_name}")
                continue
            if tag == "LegalModeInfo":
                self.add_legal_mode_info(xmlTree, path)
                continue
            if tag == "TechnicalDocumentationInfo":
                self.add_tech_documentation(xmlTree, path)
                continue
        self.resizeColumnToContents(0)
    def add_tech_documentation(self, xml_tree, path):
        """
        Adds technical documentation information to the provided XML tree and updates the UI with the relevant data.
        Parameters:
        xml_tree (ElementTree): The XML tree containing the technical documentation information.
        path (str): The file path associated with the XML tree.
        """
        element = xml_tree.find(".//TechnicalDocumentationInfo")
        if element is not None:
            tab_widget = self.parent.findChild(QTabWidget, "tabWidget")
            if not tab_widget:
                log_msg(logFile, "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ QTabWidget —É xml_uaDockWidget")
                return
            tech_doc_tab = QTableView(self.parent)
            tech_doc_model = QStandardItemModel()
            tech_doc_tab.setModel(tech_doc_model)
            tech_doc_model.setHorizontalHeaderLabels(["–ï–ª–µ–º–µ–Ω—Ç", "–ó–Ω–∞—á–µ–Ω–Ω—è"])
            fields = [
                ("DocumentationType", "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó"),
                ("DraftingDate", "–î–∞—Ç–∞ —Å–∫–ª–∞–¥–∞–Ω–Ω—è"),
                ("RegistrationData/BookNumber", "–ù–æ–º–µ—Ä –∫–Ω–∏–≥–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"),
                ("RegistrationData/RegistrationDate", "–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"),
                ("RegistrationData/RegistrationAuthority", "–û—Ä–≥–∞–Ω —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"),
                ("RegistrationCard/BookNumber", "–ù–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏"),
                ("RegistrationCard/IssuanceDate", "–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ"),
                ("Expertise/ExpertiseRequired", "–ü–æ—Ç—Ä–µ–±–∞ –≤ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑—ñ"),
                ("Expertise/ExpertiseAuthority", "–û—Ä–≥–∞–Ω –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏"),
                ("Expertise/ExpertOpinion", "–í–∏—Å–Ω–æ–≤–æ–∫ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏"),
                ("Expertise/ExpertiseDate", "–î–∞—Ç–∞ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏"),
                ("Expertise/ExpertiseNumber", "–ù–æ–º–µ—Ä –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏"),
                ("ApprovalInfo/ApprovalAuthority", "–û—Ä–≥–∞–Ω –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"),
                ("ApprovalInfo/ApprovalDate", "–î–∞—Ç–∞ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"),
                ("ApprovalInfo/ApprovalNumber", "–ù–æ–º–µ—Ä –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"),
                ("ApprovalInfo/ApprovalDocument", "–î–æ–∫—É–º–µ–Ω—Ç –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"),
                ("ApprovalActDate", "–î–∞—Ç–∞ –∞–∫—Ç—É –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")
            ]
            for field, label in fields:
                sub_element = element.find(f".//{field}")
                value = sub_element.text if sub_element is not None else ""
                key_item = QStandardItem(label)
                key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
                value_item = QStandardItem(value)
                value_item.setData(path, Qt.UserRole)
                key_item.setData(path, Qt.UserRole)
                tech_doc_model.appendRow([key_item, value_item])
            index = tab_widget.addTab(tech_doc_tab, "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è")
            tab_widget.setTabToolTip(index, "<b>–í—ñ–¥–æ–º–æ—Å—Ç—ñ –ø—Ä–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é —ñ–∑ –∑–µ–º–ª–µ—É—Å—Ç—Ä–æ—é</b><br>—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –¥–µ—Ä–∂–∞–≤–Ω–æ—ó –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏")
            # Add Document List Tab
            doc_list_tab = QTableView(self.parent)
            doc_list_model = QStandardItemModel()
            doc_list_tab.setModel(doc_list_model)
            doc_list_model.setHorizontalHeaderLabels(["–î–æ–∫—É–º–µ–Ω—Ç", "–ù–∞—è–≤–Ω—ñ—Å—Ç—å"])
            for doc_code, doc_name in self.docs_dict.items():
                key_item = QStandardItem(doc_name)
                key_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
                key_item.setToolTip(self.docs_tips.get(doc_code, ""))
                value_item = QStandardItem()
                value_item.setCheckable(True)
                # Check if the element with the specified doc_code exists in the XML tree
                exists = xml_tree.xpath(f".//DocumentList[text()='{doc_code}']")
                value_item.setCheckState(Qt.Checked if exists else Qt.Unchecked)
                value_item.setData(path, Qt.UserRole)
                key_item.setData(path, Qt.UserRole)
                doc_list_model.appendRow([key_item, value_item])
            index = tab_widget.addTab(doc_list_tab, "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")
            tab_widget.setTabToolTip(index, "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")
            tech_doc_tab.horizontalHeader().setStretchLastSection(True)
            tech_doc_tab.resizeColumnToContents(0)
            doc_list_tab.horizontalHeader().setStretchLastSection(True)
            doc_list_tab.resizeColumnToContents(0)