# -*- coding: utf-8 -*-
"""–û–±—Ä–æ–±–∫–∞ XML –¥–µ—Ä–µ–≤–∞"""

import configparser
import re

import csv
import copy
import os
from lxml import etree

from qgis.PyQt.QtWidgets import QMenu
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QDialog
from qgis.PyQt.QtWidgets import QInputDialog
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.PyQt.QtWidgets import QStyle
from qgis.PyQt.QtWidgets import QTreeView
from qgis.PyQt.QtWidgets import QAbstractItemView
from qgis.PyQt.QtGui import QStandardItem
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtGui import QStandardItemModel
from qgis.PyQt.QtCore import QDate, QModelIndex
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtCore import pyqtSignal

from .common import logFile
from .common import log_msg
from .common import log_calls
from .common import config
from .common import connector
from .date_dialog import DateInputDialog
from .delegates import StateActTypeDelegate


class CustomTreeView(QTreeView):

    """ 
        –ö–ª–∞—Å –≤—ñ–¥–∂–µ—Ç–∞ XML –¥–µ—Ä–µ–≤–∞
    """

    # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É –¥–∞–Ω–∏—Ö —É –≤—É–∑–ª—ñ –¥–µ—Ä–µ–≤–∞
    # –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä full_path
    # –¥—Ä—É–≥–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä value
    # —à–ª—è—Ö (–≥—ñ–ª–∫–∏?) —ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–ª–∏—Å—Ç–∫–∞?)

    # –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–µ–¥–∞–≥—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –¥–µ—Ä–µ–≤—ñ, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –º–µ—Ç–æ–¥ 
    # on_tree_model_data_changed –∫–ª–∞—Å—É CustomTreeView.
    # –¶–µ–π –º–µ—Ç–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î –ø–æ–≤–Ω–∏–π —à–ª—è—Ö (full_path) –¥–æ 
    # –∑–º—ñ–Ω–µ–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞ –π–æ–≥–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è (value).
    # –í—ñ–Ω —Ç–∞–∫–æ–∂ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –µ–º—ñ—Ç—É—î —Å–∏–≥–Ω–∞–ª dataChangedInTree, 
    # —è–∫–∏–π –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —ñ–Ω—à–∏–º–∏ –≤—ñ–¥–∂–µ—Ç–∞–º–∏.
    # –ê–ª–µ –≤—ñ–Ω –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î –∑–º—ñ–Ω–∏ –≤ XML-–¥–µ—Ä–µ–≤—ñ (self.xml_tree) 
    # —Ç–∞ –Ω–µ –≤–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ –¥–∏—Å–∫.


    dataChangedInTree = pyqtSignal(str, str)

    def __init__(self, parent=None):  # after icon click
        """# ‚úî 2025.02.19 09:11:07
        Initializes the CustomTreeView class.
        Args:
            parent (QWidget, optional): The parent widget. Defaults to None.
        Attributes:
            parent (QWidget): The parent widget.
            tree_upd (bool): Flag to prevent cyclic changes.
            xml_tree (object): The XML tree structure.
            xsd_descriptions (dict): Dictionary to store XSD descriptions.
            tree_row (int): The current row in the tree.
            model (QStandardItemModel): The model for the tree view.
            group_name (str): The name of the group.
            allowed_dothers (dict): Dictionary to store allowed others.
            elements_to_expand (list): List of elements to expand.
        """
        super().__init__(parent)

        # log_msg(logFile, "CustomTreeView")

        self.parent = parent
        self.tree_upd = False   # –§–ª–∞–≥ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–∏–º –∑–º—ñ–Ω–∞–º
        self.xml_tree = None
        self.xsd_appinfo = {}
        self.xsd_descriptions = {}
        self.xsd_schema = {}
        self.restrictions_data = {}

        self.tree_row = 0

        self.model = QStandardItemModel()
        self.setModel(self.model)

        self.model.setHorizontalHeaderLabels(["–ï–ª–µ–º–µ–Ω—Ç", "–ó–Ω–∞—á–µ–Ω–Ω—è"])

        #self.model.itemChanged.connect(self.on_tree_model_data_changed)
        connector.connect(self.model, "itemChanged", self.on_tree_model_data_changed)
        self.group_name = ""

        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.setSelectionMode(QAbstractItemView.NoSelection)
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.show_tree_view_context_menu)

        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –∫–ª—ñ–∫—É
        self.doubleClicked.connect(self.on_double_click)

        self.allowed_dothers = {}
        self.load_allowed_dothers()
        self.elements_to_expand = config.get(
            "ElementsToExpand", "expanded").split(", ")

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π –¥–µ–ª–µ–≥–∞—Ç –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "–ó–Ω–∞—á–µ–Ω–Ω—è"
        self.state_act_delegate = StateActTypeDelegate(self)
        self.setItemDelegateForColumn(1, self.state_act_delegate)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –æ–±–º–µ–∂–µ–Ω–Ω—è
        self.load_restrictions_data()


    def on_tree_model_data_changed(self, item):
        """ 
            –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω —É –≤—É–∑–ª—ñ –¥–µ—Ä–µ–≤–∞, –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–æ–º—É –≤–∏–∫–ª–∏–∫—É 
        """

        # 1.–û–Ω–æ–≤–ª–µ–Ω–Ω—è self.xml_tree:
        #
        # –£ –º–µ—Ç–æ–¥—ñ on_tree_model_data_changed –∫–ª–∞—Å—É CustomTreeView 
        # –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ–¥, —è–∫–∏–π –±—É–¥–µ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π 
        # –µ–ª–µ–º–µ–Ω—Ç –≤ self.xml_tree –Ω–∞ –æ—Å–Ω–æ–≤—ñ full_path —Ç–∞ value.
        # –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ:
        #   –†–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ full_path –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ 
        #   –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ self.xml_tree.
        #   –û–Ω–æ–≤–∏—Ç–∏ text —Ü—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ value.
        # 
        # üî®.–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):
        # 
        # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–æ–∫-–≤—ñ–¥–∂–µ—Ç–∞ (closeEvent) 
        # –∞–±–æ –ø–ª–∞–≥—ñ–Ω–∞ (onClosePlugin), —è–∫–∏–π –±—É–¥–µ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, 
        # —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏, —è–∫—â–æ –≤–æ–Ω–∏ –±—É–ª–∏.
        

        log_msg(logFile, f"{item.text()}")

        # –Ø–∫—â–æ –≤–∂–µ –π–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
        if self.tree_upd:  
            log_msg(logFile, "–ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞")
            return

        # –ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        self.tree_upd = True  
        log_msg(logFile, f"tree_upd = {self.tree_upd}")
        try:
            log_msg(logFile, f"tree_upd = {self.tree_upd}")
            # –û—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
            full_path = self.get_item_path(item)  
            value = item.text()

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è self.xml_tree
            self.update_xml_tree(full_path, value)

            # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Ñ–∞–π–ª —è–∫ –∑–º—ñ–Ω–µ–Ω–∏–π —É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –≤—ñ–¥–∂–µ—Ç—ñ
            self.parent.mark_as_changed()

            # –ï–º—ñ—Ç—É—î–º–æ —Å–∏–≥–Ω–∞–ª dataChangedInTree –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
            # –ü–µ—Ä–µ–¥–∞—á–∞ –∑–º—ñ–Ω —É —Ç–∞–±–ª–∏—Ü—é —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª dataChangedInTree
            log_msg(logFile, f"try: emit dataChangedInTree")
            self.dataChangedInTree.emit(full_path, value)
        finally:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
            self.tree_upd = False
            log_msg(logFile, f"tree_upd = {self.tree_upd}")


    def update_xml_tree(self, full_path, value):
        """
        –û–Ω–æ–≤–ª—é—î self.xml_tree –Ω–∞ –æ—Å–Ω–æ–≤—ñ full_path —Ç–∞ value.
        """
        
        # –ø—Ä–∏–π–º–∞—î full_path —Ç–∞ value —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏.
        # —Ä–æ–∑–±–∏–≤–∞—î full_path –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —â–æ–± –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç 
        # –≤ self.xml_tree.
        # –í—ñ–Ω –æ–Ω–æ–≤–ª—é—î text –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ value.
        # –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫, —è–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.

        log_msg(logFile, f"full_path: {full_path}, value: {value}")
        if self.xml_tree is None:
            log_msg(logFile, "Error: self.xml_tree is None")
            return

        try:
            # –†–æ–∑–¥—ñ–ª—è—î–º–æ —à–ª—è—Ö –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
            path_parts = full_path.split("/")
            # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –∫–æ—Ä–µ–Ω–µ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
            current_element = self.xml_tree.getroot()

            # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ —á–∞—Å—Ç–∏–Ω–∞—Ö —à–ª—è—Ö—É, –∑–Ω–∞—Ö–æ–¥—è—á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç
            for part in path_parts[1:]:  
                found = False
                for child in current_element:
                    if child.tag == part:
                        current_element = child
                        found = True
                        break
                if not found:
                    log_msg(logFile, f"Error: Element '{part}' not found in path '{full_path}'")
                    return

            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞
            current_element.text = value
            log_msg(logFile, f"Element '{full_path}' updated with value '{value}'")
        except Exception as e:
            log_msg(logFile, f"Error updating XML tree: {e}")

    def load_restrictions_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É—î –¥–∞–Ω—ñ –∑ restrictions.csv."""
        # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ .ini
        restrictions_path = os.path.join(os.path.dirname(__file__), 'templates', 'restriction.ini')
        if not os.path.exists(restrictions_path):
            log_msg(logFile, f"–§–∞–π–ª –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {restrictions_path}")
            return

        try:
            config = configparser.ConfigParser()
            # with open(restrictions_path, 'r', encoding='utf-8') as f:
            #     config.read_file(f)
            config.read(restrictions_path, encoding='utf-8')


            if 'RestrictionCode' in config:
                all_codes = dict(config['RestrictionCode'])
                for code, name in all_codes.items():
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–¥ —Ä–æ–∑–¥—ñ–ª—É (–ø–µ—Ä—à—ñ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∏)
                    section_code = code.split('.')[0]
                    if len(section_code) > 2: # –¥–ª—è –∫–æ–¥—ñ–≤ —Ç–∏–ø—É '01', '02'
                        section_code = section_code[:2]

                    if section_code not in self.restrictions_data:
                        self.restrictions_data[section_code] = {}
                    self.restrictions_data[section_code][code] = name
        except Exception as e:
            log_msg(logFile, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ restriction.ini: {e}")

    def handle_restriction_code_menu(self, point, item):
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ–¥—É –æ–±–º–µ–∂–µ–Ω–Ω—è."""
        menu = QMenu()
        select_code_action = QAction("–í–∏–±—Ä–∞—Ç–∏ –∫–æ–¥ –æ–±–º–µ–∂–µ–Ω–Ω—è...", self)
        select_code_action.triggered.connect(lambda: self.select_restriction_code(item))
        menu.addAction(select_code_action)
        menu.exec_(self.viewport().mapToGlobal(point))

    def get_key_item_path(self, item):
        """–û—Ç—Ä–∏–º—É—î —à–ª—è—Ö –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤—ñ"""
        log_msg(logFile)
        path = []
        while item:
            path.insert(0, item.text())
            item = item.parent()
        return "/".join(path)

    def get_key_item_path(self, item):
        """–û—Ç—Ä–∏–º—É—î —à–ª—è—Ö –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤—ñ"""
        log_msg(logFile)
        path = []
        while item:
            path.insert(0, item.text())
            item = item.parent()
        return "/".join(path)


    def editNode(self, item):
        """ –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ –≤—É–∑–æ–ª –¥–µ—Ä–µ–≤–∞ —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è.
        """
        log_msg(logFile)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —à–ª—è—Ö—É –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
        full_path = self.get_full_path(item)
        value = item.text()
        # –ï–º—ñ—Ç—É—î–º–æ —Å–∏–≥–Ω–∞–ª —ñ–∑ –¥–∞–Ω–∏–º–∏ (—à–ª—è—Ö –≤—É–∑–ª–∞ —Ç–∞ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è)
        self.dataChangedInTree.emit(full_path, value)
        return


    def load_allowed_dothers(self):  # after icon click

        """ 
            –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤

            –°–ø–∏—Å–∫–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –æ–ø–∏—Å—É—é—Ç—å—Å—è –≤ ini.
            –û—Å–∫—ñ–ª—å–∫–∏, –Ω–µ –≤—Å—ñ–º –µ–ª–µ–º–µ–Ω—Ç–∞–º –¥–µ—Ä–µ–≤–∞ –º–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ—á—ñ—Ä–Ω—ñ.

        """
        # log_msg(logFile, "")

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–µ–∫—Ü—ñ—é [AllowedDothers]
        if "AllowedDothers" in config:
            for path, rules in config["AllowedDothers"].items():
                self.allowed_dothers[path.strip()] = {}
                # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
                rules = " ".join(rules.split())
                elements = rules.split(" ")
                for i in range(0, len(elements), 2):
                    try:
                        element = elements[i]
                        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —á–∏—Å–ª–æ
                        limit = int(elements[i + 1])
                        self.allowed_dothers[path.strip()][element] = limit
                    except (IndexError, ValueError):
                        log_msg(
                            logFile, f"–ü–æ–º–∏–ª–∫–∞ —É —Å–µ–∫—Ü—ñ—ó [AllowedDothers] –¥–ª—è —à–ª—è—Ö—É '{path.strip()}': {rules}")  # pylint: disable=line-too-long

    def show_tree_view_context_menu(self, point):
        """
        –°—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–∫–∞–∑—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–µ–Ω–µ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —É treeViewXML.
        """
        index = self.indexAt(point)
        if not index.isValid():
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ–∫ –±—É–≤ –Ω–∞ –∫–æ—Ä–µ–Ω–µ–≤–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ (—É —è–∫–æ–≥–æ –Ω–µ–º–∞—î –±–∞—Ç—å–∫–∞)
        if not index.parent().isValid():
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π XML-—Ñ–∞–π–ª
            if not self.parent.current_xml:
                return

            menu = QMenu()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ—ó
            save_action = QAction(self.parent.plugin.action_save_tool.icon(), "–ó–±–µ—Ä–µ–≥—Ç–∏", self)
            save_as_action = QAction(self.parent.plugin.action_save_as_tool.icon(), "–ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫...", self)
            check_action = QAction(self.parent.plugin.action_check_tool.icon(), "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏", self)

            # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –¥—ñ—ó –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –≤—ñ–¥–∂–µ—Ç–∞
            save_action.triggered.connect(self.parent.process_action_save)
            save_as_action.triggered.connect(self.parent.process_action_save_as)
            check_action.triggered.connect(self.parent.process_action_check)

            # –î–æ–¥–∞—î–º–æ –¥—ñ—ó –¥–æ –º–µ–Ω—é
            menu.addAction(save_action)
            menu.addAction(save_as_action)

            close_action = QAction(self.style().standardIcon(QStyle.SP_DialogCloseButton), "–ó–∞–∫—Ä–∏—Ç–∏", self)
            close_action.triggered.connect(lambda: self.parent.process_action_close_xml(self.parent.current_xml))
            menu.addAction(close_action)

            menu.addSeparator()
            menu.addAction(check_action)

            # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é —É –ø–æ–∑–∏—Ü—ñ—ó –∫—É—Ä—Å–æ—Ä–∞
            menu.exec_(self.viewport().mapToGlobal(point))
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ–∫ –±—É–≤ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ "–í–ª–∞—Å–Ω–∏–∫–∏"
        item = self.model.itemFromIndex(index)
        item_path = item.data(Qt.UserRole)
        
        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è RestrictionCode
        if item_path and item_path.endswith(("/RestrictionInfo/RestrictionCode", "/Restrictions/RestrictionInfo/RestrictionCode")):
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ–∫ –±—É–≤ –Ω–∞ –∫–æ–ª–æ–Ω—Ü—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            if index.column() == 1:
                self.handle_restriction_code_menu(point, item)
            return

        # --- –ü–æ—á–∞—Ç–æ–∫ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –º–µ–Ω—é ---
        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è .../AdjacentUnitInfo/Proprietor
        if item_path and item_path.endswith("/AdjacentUnitInfo/Proprietor"):
            menu = QMenu()
            xml_element = self._find_xml_element_by_path(item_path)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î –≤–ª–∞—Å–Ω–∏–∫ (NaturalPerson –∞–±–æ LegalEntity)
            existing_owner = xml_element.find("NaturalPerson")
            if existing_owner is None:
                existing_owner = xml_element.find("LegalEntity")

            icon_path = os.path.dirname(__file__)
            add_person_icon = QIcon(os.path.join(icon_path, 'images', 'human.png'))
            add_entity_icon = QIcon(os.path.join(icon_path, 'images', 'firm.png'))
            delete_owner_icon = QIcon(os.path.join(icon_path, 'images', 'delete_human.png'))

            if existing_owner is None:
                # –í–ª–∞—Å–Ω–∏–∫–∞ –Ω–µ–º–∞—î, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏
                add_person_action = QAction(add_person_icon, "–î–æ–¥–∞—Ç–∏ —Ñ—ñ–∑–∏—á–Ω—É –æ—Å–æ–±—É", self)
                add_entity_action = QAction(add_entity_icon, "–î–æ–¥–∞—Ç–∏ —é—Ä–∏–¥–∏—á–Ω—É –æ—Å–æ–±—É", self)

                add_person_action.triggered.connect(lambda: self.add_child_element(item, "NaturalPerson"))
                add_entity_action.triggered.connect(lambda: self.add_child_element(item, "LegalEntity"))

                menu.addAction(add_person_action)
                menu.addAction(add_entity_action)
            else:
                # –í–ª–∞—Å–Ω–∏–∫ —î, –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–∏–¥–∞–ª–∏—Ç–∏
                owner_item_index = self.model.index(0, 0, index) # –ü–µ—Ä—à–∏–π –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç
                owner_item = self.model.itemFromIndex(owner_item_index)
                if owner_item:
                    owner_display_name = owner_item.text()
                    delete_owner_action = QAction(delete_owner_icon, f"–í–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞ '{owner_display_name}'", self)
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ lambda, —â–æ–± –ø–µ—Ä–µ–¥–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π item –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                    delete_owner_action.triggered.connect(lambda _, it=owner_item: self.delete_element(it))
                    menu.addAction(delete_owner_action)

            if not menu.isEmpty():
                menu.exec_(self.viewport().mapToGlobal(point))
            return





        menu = QMenu()
        has_actions = False

        proprietors_path = "UkrainianCadastralExchangeFile/InfoPart/CadastralZoneInfo/CadastralQuarters/CadastralQuarterInfo/Parcels/ParcelInfo/Proprietors"
        if item_path == proprietors_path:
            menu = QMenu()

            # –Ü–∫–æ–Ω–∫–∏
            icon_path = os.path.dirname(__file__)
            add_person_icon = QIcon(os.path.join(icon_path, 'images', 'human.png'))
            add_entity_icon = QIcon(os.path.join(icon_path, 'images', 'firm.png'))
            delete_owner_icon = QIcon(os.path.join(icon_path, 'images', 'delete_human.png'))

            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ—ó
            add_person_action = QAction(add_person_icon, "–î–æ–¥–∞—Ç–∏ —Ñ—ñ–∑–∏—á–Ω—É –æ—Å–æ–±—É", self)
            add_entity_action = QAction(add_entity_icon, "–î–æ–¥–∞—Ç–∏ —é—Ä–∏–¥–∏—á–Ω—É –æ—Å–æ–±—É", self)
            delete_owner_action = QAction(delete_owner_icon, "–í–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞", self)

            # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –¥—ñ—ó –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ (–ø–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∏)
            add_person_action.triggered.connect(lambda: QMessageBox.information(self, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª '–î–æ–¥–∞—Ç–∏ —Ñ—ñ–∑–∏—á–Ω—É –æ—Å–æ–±—É' –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."))
            add_entity_action.triggered.connect(lambda: QMessageBox.information(self, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª '–î–æ–¥–∞—Ç–∏ —é—Ä–∏–¥–∏—á–Ω—É –æ—Å–æ–±—É' –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."))
            delete_owner_action.triggered.connect(lambda: QMessageBox.information(self, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª '–í–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞' –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."))

            menu.addAction(add_person_action)
            menu.addAction(add_entity_action)
            menu.addSeparator()
            menu.addAction(delete_owner_action)
            menu.exec_(self.viewport().mapToGlobal(point))
            return # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å, —â–æ–± –Ω–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —ñ–Ω—à—É –ª–æ–≥—ñ–∫—É

        # --- –õ–æ–≥—ñ–∫–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ ---
        if item_path in self.xsd_schema:
            element_schema = self.xsd_schema[item_path]
            xml_element = self._find_xml_element_by_path(item_path)

            if xml_element is not None and 'children' in element_schema:
                add_menu = QMenu("–î–æ–¥–∞—Ç–∏", self)
                added_to_add_menu = False
                for child_info in element_schema['children']:
                    child_tag = child_info['name']
                    max_occurs = child_info.get('maxOccurs', 1)
                    
                    # –†–∞—Ö—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                    current_count = len(xml_element.findall(child_tag))

                    if max_occurs == 'unbounded' or current_count < int(max_occurs):
                        child_ukr_name = self.xsd_appinfo.get(f"{item_path}/{child_tag}", child_tag)
                        add_action = QAction(f"{child_ukr_name}", self)
                        add_action.triggered.connect(
                            lambda _, p_item=item, c_tag=child_tag: self.add_child_element(p_item, c_tag)
                        )
                        add_menu.addAction(add_action)
                        added_to_add_menu = True

                if added_to_add_menu:
                    menu.addMenu(add_menu)
                    has_actions = True

        # --- –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ ---
        parent_item = item.parent()
        if parent_item:
            parent_path = parent_item.data(Qt.UserRole)
            if parent_path in self.xsd_schema:
                parent_schema = self.xsd_schema[parent_path]
                parent_xml_element = self._find_xml_element_by_path(parent_path)
                
                if parent_xml_element is not None and 'children' in parent_schema:
                    item_tag = item_path.split('/')[-1]
                    for child_info in parent_schema['children']:
                        if child_info['name'] == item_tag:
                            min_occurs = child_info.get('minOccurs', 1)
                            current_count = len(parent_xml_element.findall(item_tag))

                            if current_count > int(min_occurs):
                                if has_actions:
                                    menu.addSeparator()
                                delete_action = QAction(f"–í–∏–¥–∞–ª–∏—Ç–∏ '{item.text()}'", self)
                                delete_action.triggered.connect(lambda _, it=item: self.delete_element(it))
                                menu.addAction(delete_action)
                                has_actions = True
                            break

        if has_actions:
            menu.exec_(self.viewport().mapToGlobal(point))

    def select_restriction_code(self, item):
        """–ó–∞–ø—É—Å–∫–∞—î –¥–≤–æ–∫—Ä–æ–∫–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É –∫–æ–¥—É –æ–±–º–µ–∂–µ–Ω–Ω—è."""
        if not self.restrictions_data:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–î–∞–Ω—ñ –ø—Ä–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
            return

        # –ï—Ç–∞–ø 1: –í–∏–±—ñ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥—É (2-–∑–Ω–∞—á–Ω–æ–≥–æ)
        main_codes = {code: name for section in self.restrictions_data.values() for code, name in section.items() if len(code) == 2}
        main_code_display_names = sorted([f"{code} - {name}" for code, name in main_codes.items()])

        dialog1 = QInputDialog(self)
        dialog1.setFixedWidth(800)
        dialog1.setLabelText("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:")
        dialog1.setComboBoxItems(main_code_display_names)
        dialog1.setWindowTitle("–í–∏–±—ñ—Ä —Ä–æ–∑–¥—ñ–ª—É –æ–±–º–µ–∂–µ–Ω–Ω—è")
        ok = dialog1.exec_()
        main_code_selection = dialog1.textValue()

        if not ok or not main_code_selection:
            return

        selected_main_code = main_code_selection.split(' - ')[0]
        selected_code = selected_main_code

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥—Ä—É–≥–∏–π –µ—Ç–∞–ø
        sub_codes_exist = any(code.startswith(selected_main_code + '.') for section in self.restrictions_data.values() for code in section)

        # –ö–æ–¥–∏, –¥–ª—è —è–∫–∏—Ö –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥—Ä—É–≥–∏–π –∫—Ä–æ–∫, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —î –ø—ñ–¥–∫–æ–¥–∏
        single_step_codes = {'10', '11', '12', '13', '14'}

        if sub_codes_exist and selected_main_code not in single_step_codes:
            # –ï—Ç–∞–ø 2: –í–∏–±—ñ—Ä —É—Ç–æ—á–Ω–µ–Ω–æ–≥–æ –∫–æ–¥—É
            sub_codes = {}
            if selected_main_code in self.restrictions_data:
                sub_codes = {code: name for code, name in self.restrictions_data[selected_main_code].items() if code.startswith(selected_main_code + '.')}

            if sub_codes:
                # –î–æ–¥–∞—î–º–æ —Ç–∞–∫–æ–∂ —ñ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥ –¥–æ —Å–ø–∏—Å–∫—É –≤–∏–±–æ—Ä—É
                sub_codes[selected_main_code] = main_codes[selected_main_code]
                
                sub_code_display_names = sorted([f"{code} - {name}" for code, name in sub_codes.items()])

                dialog2 = QInputDialog(self)
                dialog2.setFixedWidth(800)
                dialog2.setLabelText("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–¥:")
                dialog2.setComboBoxItems(sub_code_display_names)
                dialog2.setWindowTitle("–£—Ç–æ—á–Ω–µ–Ω–Ω—è –∫–æ–¥—É –æ–±–º–µ–∂–µ–Ω–Ω—è")
                ok = dialog2.exec_()
                sub_code_selection = dialog2.textValue()

                if ok and sub_code_selection:
                    selected_code = sub_code_selection.split(' - ')[0]
                elif not ok: # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–°–∫–∞—Å—É–≤–∞—Ç–∏" –Ω–∞ –¥—Ä—É–≥–æ–º—É –µ—Ç–∞–ø—ñ
                    return
                # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–≤, –∞–ª–µ –Ω–∞—Ç–∏—Å–Ω—É–≤ "–û–ö", –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥

        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–æ–¥—É
        selected_name = ""
        for section in self.restrictions_data.values():
            if selected_code in section:
                selected_name = section[selected_code]
                break

        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–æ–¥–µ–ª—ñ
        item.setText(selected_code)

        # –¢–µ–ø–µ—Ä –æ–Ω–æ–≤–ª—é—î–º–æ RestrictionName
        # `item` - —Ü–µ value_item –¥–ª—è RestrictionCode. –ô–æ–≥–æ "–±—Ä–∞—Ç" - name_item. –á—Ö–Ω—ñ–π –±–∞—Ç—å–∫–æ - name_item –¥–ª—è RestrictionInfo.
        if item.parent():
            # –ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–∞—Ä–∏ (name, value) - —Ü–µ name_item –¥–ª—è RestrictionInfo
            restriction_info_item = item.parent()
            if restriction_info_item:
                # –®—É–∫–∞—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç RestrictionName
                for row in range(restriction_info_item.rowCount()):
                    child_name_item = restriction_info_item.child(row, 0)
                    if child_name_item and child_name_item.text() == self.xsd_appinfo.get(f"{restriction_info_item.data(Qt.UserRole)}/RestrictionName", "RestrictionName"):
                        # –ó–Ω–∞–π—à–ª–∏ RestrictionName, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
                        restriction_name_value_item = restriction_info_item.child(row, 1)
                        if restriction_name_value_item:
                            restriction_name_value_item.setText(selected_name)
                        break

    def on_double_click(self, index):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ –¥–µ—Ä–µ–≤–∞."""
        if not index.isValid() or index.column() != 1:
            return

        item = self.model.itemFromIndex(index)
        if not item:
            return

        item_path = item.data(Qt.UserRole)
        if item_path and item_path.endswith("Date"):
            self.handle_date_edit(item)

    def handle_date_edit(self, item):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —Ç–∞ –æ–Ω–æ–≤–ª—é—î –∑–Ω–∞—á–µ–Ω–Ω—è."""
        current_value = item.text()
        default_date = QDate.fromString(current_value, "yyyy-MM-dd")
        if not default_date.isValid():
            default_date = QDate.currentDate()

        dialog = DateInputDialog(default_date=default_date, parent=self)

        if dialog.exec_() == QDialog.Accepted:
            new_date_str = dialog.get_date()
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ–π—Å–Ω–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–π–≤–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
            if new_date_str != current_value:
                item.setText(new_date_str)
                # –°–∏–≥–Ω–∞–ª itemChanged –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ,
                # —â–æ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è XML —á–µ—Ä–µ–∑ on_tree_model_data_changed



    def add_child_element(self, parent_item, child_tag):
        """–î–æ–¥–∞—î –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –≤ XML —Ç–∞ –≤ –¥–µ—Ä–µ–≤–æ GUI."""
        parent_path = parent_item.data(Qt.UserRole)
        parent_xml_element = self._find_xml_element_by_path(parent_path)
        if parent_xml_element is None:
            log_msg(logFile, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π XML –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è {parent_path}")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π XML –µ–ª–µ–º–µ–Ω—Ç
        new_xml_element = etree.Element(child_tag)
        new_xml_element.text = " " # –î–æ–¥–∞—î–º–æ –ø—Ä–æ–±—ñ–ª, —â–æ–± —Ç–µ–≥ –Ω–µ –±—É–≤ —Å–∞–º–æ–∑–∞–∫—Ä–∏–≤–∞—é—á–∏–º
        parent_xml_element.append(new_xml_element)

        # –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –≤ GUI
        child_path = f"{parent_path}/{child_tag}"
        name_item, value_item = self._create_qt_items_for_element(new_xml_element, child_path)
        parent_item.appendRow([name_item, value_item])

        # –†–æ–±–∏–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        value_item.setEditable(True)

        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Ñ–∞–π–ª —è–∫ –∑–º—ñ–Ω–µ–Ω–∏–π
        self.parent.mark_as_changed()
        self.expand(parent_item.index())

    def delete_element(self, item):
        """–í–∏–¥–∞–ª—è—î –µ–ª–µ–º–µ–Ω—Ç –∑ XML —Ç–∞ –∑ –¥–µ—Ä–µ–≤–∞ GUI."""
        item_path = item.data(Qt.UserRole)
        xml_element_to_delete = self._find_xml_element_by_path(item_path)

        if xml_element_to_delete is not None:
            parent_xml_element = xml_element_to_delete.getparent()
            if parent_xml_element is not None:
                parent_xml_element.remove(xml_element_to_delete)

                # –í–∏–¥–∞–ª—è—î–º–æ –∑ –º–æ–¥–µ–ª—ñ
                parent_item = item.parent()
                if parent_item:
                    parent_item.removeRow(item.row())
                else: # —è–∫—â–æ —Ü–µ –∫–æ—Ä–µ–Ω–µ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç (—Ö–æ—á–∞ –º–∏ –Ω–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –π–æ–≥–æ –≤–∏–¥–∞–ª—è—Ç–∏)
                    self.model.removeRow(item.row())

                # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Ñ–∞–π–ª —è–∫ –∑–º—ñ–Ω–µ–Ω–∏–π
                self.parent.mark_as_changed()
            else:
                log_msg(logFile, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –±–µ–∑ –±–∞—Ç—å–∫–∞: {item_path}")
        else:
            log_msg(logFile, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ XML –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {item_path}")

    def _find_xml_element_by_path(self, path):
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –µ–ª–µ–º–µ–Ω—Ç –≤ self.xml_tree –∑–∞ XPath."""
        if self.xml_tree is None:
            return None
        return self.xml_tree.getroot().xpath(f"/{path}")[0] if path else None
        
    def get_element_path(self, item):
        """ –ü–æ–±—É–¥–æ–≤–∞ –ø–æ–≤–Ω–æ–≥–æ —à–ª—è—Ö—É –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–µ—Ä–µ–≤–∞.

        """
        log_msg(logFile, f"{item.text()}")
        path = []
        while item:
            path.insert(0, item.text())
            item = item.parent()

        return "/" + "/".join(path)

    def get_current_child_count(self, parent_item, child_name):
        """
        –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —ñ–∑ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–º —ñ–º–µ–Ω–µ–º.
        """
        log_msg(logFile)
        count = 0
        for i in range(parent_item.rowCount()):
            if parent_item.child(i).text() == child_name:
                count += 1
        return count

    def create_add_child_callback(self, parent_item, child_name):
        """
        –°—Ç–≤–æ—Ä—é—î –∑–∞–º–∏–∫–∞–Ω–Ω—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—á—ñ—Ä–Ω—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞.
        """
        log_msg(logFile)
        return lambda: self.add_child(parent_item, child_name)

    def add_child(self, item, child_name):
        """
        –î–æ–¥–∞—î –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –¥–æ –≤–∫–∞–∑–∞–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–µ—Ä–µ–≤–∞.
        """
        log_msg(logFile)
        child_item = QStandardItem(child_name)
        child_item.setEditable(False)  # –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –µ–ª–µ–º–µ–Ω—Ç–∞
        item.appendRow([child_item, QStandardItem("")])

    def change_value(self):
        """
        –ó–º—ñ–Ω—é—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞.
        """
        log_msg(logFile)
        index = self.currentIndex()
        if not index.isValid():
            return
        item = self.model.itemFromIndex(index)
        if item:
            # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ –¥—ñ–∞–ª–æ–≥)
            new_value = "–ù–æ–≤e –ó–Ω–∞—á–µ–Ω–Ω—è"  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç
            item.setText(new_value)
            item.setToolTip("–û–Ω–æ–≤–ª–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞")  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –æ–ø–∏—Å

    def add_child_item(self):
        """
        –î–æ–¥–∞—î –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –¥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞.
        """
        log_msg(logFile)
        index = self.currentIndex()
        if not index.isValid():
            return
        parent_item = self.model.itemFromIndex(index)
        if parent_item:
            child_name = "–ù–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç"
            child_item = QStandardItem(child_name)
            child_item.setToolTip("–û–ø–∏—Å –Ω–æ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞")  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –æ–ø–∏—Å
            parent_item.appendRow([child_item, QStandardItem("")])
        return

    def delete_item(self):
        """
        –í–∏–¥–∞–ª—è—î –≤–∏–±—Ä–∞–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç.
        """
        log_msg(logFile)
        index = self.currentIndex()
        if not index.isValid():
            return
        item = self.model.itemFromIndex(index)
        if item:
            parent = item.parent()
            if parent:
                parent.removeRow(item.row())
            else:
                self.model.removeRow(item.row())
        return




    def expand_initial_elements(self):
        """ –†–æ–∑–∫—Ä–∏–≤–∞—î –∑–∞–¥–∞–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–µ—Ä–µ–≤–∞ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è XML.

            –°–ø–∏—Å–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —è–∫—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä–æ–∑–∫—Ä–∏—Ç—ñ –ø—ñ—Å–ª—è 
            –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è elements_to_expand –æ–ø–∏—Å—É—î—Ç—å—Å—è –≤ ini.

        """
        
        # log_calls(logFile)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –¥–µ—Ä–µ–≤–∞
        model = self.model
        if model is None:
            return

        def expand_recursively(index):
            """
            –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–æ–∑–∫—Ä–∏–≤–∞—î –≤—É–∑–ª–∏ –¥–µ—Ä–µ–≤–∞, —è–∫—â–æ —ó—Ö–Ω—ñ–π —Ç–µ–≥ —É —Å–ø–∏—Å–∫—É self.elements_to_expand.

            :param index: –Ü–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–æ–¥–µ–ª—ñ.
            """
            item = model.itemFromIndex(index)
            if item is None:
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –µ–ª–µ–º–µ–Ω—Ç–∞, —è–∫–∏–π –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ Qt.UserRole
            item_full_path = item.data(Qt.UserRole)
            if item_full_path:
                # –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω—É –Ω–∞–∑–≤—É —Ç–µ–≥–∞ –∑ –ø–æ–≤–Ω–æ–≥–æ —à–ª—è—Ö—É
                item_tag_name = item_full_path.split('/')[-1]
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑–∫—Ä–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –∑–∞ –π–æ–≥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—é –Ω–∞–∑–≤–æ—é
                if item_tag_name in self.elements_to_expand:
                    self.expand(index)

            # –û–±—Ö—ñ–¥ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            for row in range(item.rowCount()):
                child_index = model.index(row, 0, index)
                expand_recursively(child_index)

        # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≤—É–∑–æ–ª
        root_index = model.index(0, 0)
        expand_recursively(root_index)

        return

    def get_item_path(self, item):
        """
        –û—Ç—Ä–∏–º—É—î —à–ª—è—Ö –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ TreeView.
        """
        log_msg(logFile)
        path = []
        while item:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç —ñ–∑ –ø–µ—Ä—à–æ—ó –∫–æ–ª–æ–Ω–∫–∏
            parent = item.parent()
            if parent:
                # –ë–µ—Ä–µ–º–æ —Ç–µ–∫—Å—Ç —ñ–∑ –∫–æ–ª–æ–Ω–∫–∏ 0
                key = parent.child(item.row(), 0).text()
            else:
                # –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–µ–Ω–µ–≤–∏–π
                key = self.model.item(item.row(), 0).text()
            path.insert(0, key)
            item = parent
        return "/".join(path)

    def set_column_width(self, column_index, width_percentage):

        # log_msg(logFile)
        total_width = self.viewport().width()
        column_width = int(total_width * width_percentage / 100)
        self.setColumnWidth(column_index, column_width)

    def validate_full_name(self, full_name):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ü–Ü–ë –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É:
        - –ü—Ä—ñ–∑–≤–∏—â–µ, –Ü–º'—è —Ç–∞ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ
            –º–∞—é—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É.
        - –£ –Ü–º'—è —Ç–∞ –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –¥–æ–ø—É—Å–∫–∞—é—Ç—å—Å—è –∫—Ä–∞–ø–∫–∏.
        """
        log_msg(logFile)
        pattern = r"^[–ê-–Ø–Ü–á–Ñ“ê][–∞-—è—ñ—ó—î“ë']+ [–ê-–Ø–Ü–á–Ñ“ê][–∞-—è—ñ—ó—î“ë'\.]+(?: [–ê-–Ø–Ü–á–Ñ“ê][–∞-—è—ñ—ó—î“ë'\.]+)?$"
        return bool(re.match(pattern, full_name))

    def tree_FileDate_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î FileDate —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ FileDate —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_FileDate = self.find_element_index(path)
        if not index_FileDate.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç FileDate –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        item_FileDate = self.model.itemFromIndex(index_FileDate)
        item_FileDate.parent().child(item_FileDate.row(), 1).setText(value)

    def tree_FileGUID_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î FileGUID —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ FileGUID —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_FileGUID = self.find_element_index(path)
        if not index_FileGUID.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç FileGUID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        item_FileGUID = self.model.itemFromIndex(index_FileGUID)
        item_FileGUID.parent().child(item_FileGUID.row(), 1).setText(value)

    def tree_FormatVersion_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î FormatVersion —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ FormatVersion —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_FormatVersion = self.find_element_index(path)
        if not index_FormatVersion.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç FormatVersion –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        item_FormatVersion = self.model.itemFromIndex(index_FormatVersion)
        item_FormatVersion.parent().child(item_FormatVersion.row(), 1).setText(value)

    def tree_ReceiverName_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î ReceiverName —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ ReceiverName —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_ReceiverName = self.find_element_index(path)
        if not index_ReceiverName.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç ReceiverName –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        item_ReceiverName = self.model.itemFromIndex(index_ReceiverName)
        item_ReceiverName.parent().child(item_ReceiverName.row(), 1).setText(value)

    def tree_ReceiverIdentifier_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î ReceiverIdentifier —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ ReceiverIdentifier —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_ReceiverIdentifier = self.find_element_index(path)
        if not index_ReceiverIdentifier.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç ReceiverIdentifier –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        item_ReceiverIdentifier = self.model.itemFromIndex(
            index_ReceiverIdentifier)
        item_ReceiverIdentifier.parent().child(
            item_ReceiverIdentifier.row(), 1).setText(value)

    def tree_Software_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î Software —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ Software —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_Software = self.find_element_index(path)
        if not index_Software.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç Software –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        item_Software = self.model.itemFromIndex(index_Software)
        item_Software.parent().child(item_Software.row(), 1).setText(value)

    def tree_SoftwareVersion_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î SoftwareVersion —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ SoftwareVersion —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_SoftwareVersion = self.find_element_index(path)
        if not index_SoftwareVersion.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç SoftwareVersion –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        item_SoftwareVersion = self.model.itemFromIndex(index_SoftwareVersion)
        item_SoftwareVersion.parent().child(item_SoftwareVersion.row(), 1).setText(value)

    def tree_CRS_update(self, full_path, value):
        """ –û–Ω–æ–≤–ª—é—î CRS —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ CRS —É —Ç–∞–±–ª–∏—Ü—ñ
            –Ø–∫—â–æ value –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è SC63 —Ç–æ –ø—ñ—Å–ª—è "," -> {X,C,P,T}
        """
        log_msg(logFile, f"{value}")

        index_CRS = self.find_element_index(path=full_path, element_name=None)
        if not index_CRS.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç CoordinateSystem –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return

        item_CRS = self.model.itemFromIndex(index_CRS)
        # ‚úî 2025.01.30 10:32:42 CoordinateSystem
        log_msg(logFile, f"–ó–Ω–∞–π–¥–µ–Ω–æ –≤—É–∑–æ–ª {item_CRS.text()}")
        # –¢—Ä–µ–±–∞ –∑–Ω–∞–π—Ç–∏ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç CoordinateSystem
        # –Ø–∫—â–æ –≤—ñ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, —Ç–æ –≤–∏—Ö–æ–¥–∏–º–æ
        if item_CRS.rowCount() == 0:
            log_msg(logFile, f"–î–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç CoordinateSystem –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        log_msg(
            logFile, f"–ï–ª–µ–º–µ–Ω—Ç CoordinateSystem –º–∞—î {item_CRS.rowCount()} –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.")
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç CoordinateSystem
        item_CRS_child = item_CRS.child(0)
        log_msg(logFile, f"–î–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç {item_CRS_child.text()}")

        # –Ø–∫—â–æ —Å—Ç–∞—Ä–∞ CoordinateSystem SC63
        if item_CRS_child.text() == "SC63":

            # –Ø–∫—â–æ –Ω–æ–≤–∞ CoordinateSystem SC63
            if value.startswith("SC63,"):
                # —Ç–æ –ø–∞—Ä—Å—É—î–º–æ –Ω–æ–≤–∏–π —Ä–∞–π–æ–Ω {X,C,P,T}
                sc63_region = value.split(",")[1].strip()
                log_msg(logFile, f"–ù–æ–≤–∏–π SC63 —Ä–∞–π–æ–Ω: {sc63_region}")
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç–∞—Ä–∏–π —Ä–∞–π–æ–Ω - –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç SC63
                item_CRS_child_child = item_CRS_child.child(0)
                # –õ–æ–≥—É—î–º–æ —Ä–∞–π–æ–Ω
                log_msg(
                    logFile, f"–°—Ç–∞—Ä–∏–π SC63 —Ä–∞–π–æ–Ω {item_CRS_child_child.text()}")
                # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–∞–π–æ–Ω
                item_CRS_child_child.setText(sc63_region)
                # –õ–æ–≥—É—î–º–æ —Ä–∞–π–æ–Ω
                log_msg(
                    logFile, f"–û–Ω–æ–≤–ª–µ–Ω–∏–π SC63 —Ä–∞–π–æ–Ω {item_CRS_child_child.text()}")
            # –Ø–∫—â–æ –Ω–æ–≤–∞ CoordinateSystem Local
            elif value.startswith("Local"):
                # –∑–∞–º—ñ–Ω—é—î–º–æ SC63 –Ω–∞ –Ω–æ–≤—É Local
                item_CRS_child.setText("Local")
                # –∑–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç Local
                item_CRS_child_child = item_CRS_child.child(0)
                # –ø–∞—Ä—Å–∏–º–æ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—ó –ª–æ–∫–∞–ª—å–Ω–æ—ó CS, —è–∫–∏–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –¥—É–∂–∫–∞—Ö
                local_CS_number = value[value.find("(") + 1:value.find(")")]
                # –õ–æ–≥—É—î–º–æ –Ω–æ–º–µ—Ä
                log_msg(
                    logFile, f"–ù–æ–≤–∏–π –Ω–æ–º–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ—ó CS: {local_CS_number}")
                # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–º–µ—Ä
                item_CRS_child_child.setText(local_CS_number)
            # –Ø–∫—â–æ –Ω–æ–≤–∞ CoordinateSystem —ñ–Ω—à–∞
            else:
                # –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ä–∞–π–æ–Ω
                item_CRS_child.removeRows(0, item_CRS_child.rowCount())
                # –∑–∞–º—ñ–Ω—é—î–º–æ SC63 –Ω–∞ –Ω–æ–≤—É
                item_CRS_child.setText(value)
        # –Ø–∫—â–æ —Å—Ç–∞—Ä–∞ CoordinateSystem Local
        elif item_CRS_child.text() == "Local":
            # –Ø–∫—â–æ –Ω–æ–≤–∞ CoordinateSystem SC63
            if value.startswith("SC63,"):
                # –∑–∞–º—ñ–Ω—é—î–º–æ Local –Ω–∞ –Ω–æ–≤—É SC63
                item_CRS_child.setText("SC63")
                # –∑–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç SC63
                item_CRS_child_child = item_CRS_child.child(0)
                # –ø–∞—Ä—Å–∏–º–æ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—ó SC63, —è–∫–∏–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –∫–æ–º–∏
                sc63_region = value.split(",")[1].strip()
                # –õ–æ–≥—É—î–º–æ –Ω–æ–º–µ—Ä
                log_msg(logFile, f"–ù–æ–≤–∏–π SC63 —Ä–∞–π–æ–Ω: {sc63_region}")
                # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–º–µ—Ä
                item_CRS_child_child.setText(sc63_region)
            # –Ø–∫—â–æ –Ω–æ–≤–∞ CoordinateSystem Local
            elif value.startswith("Local"):
                # –ø–∞—Ä—Å–∏–º–æ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—ó –ª–æ–∫–∞–ª—å–Ω–æ—ó CS, —è–∫–∏–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –¥—É–∂–∫–∞—Ö
                local_CS_number = value[value.find("(") + 1:value.find(")")]
                # –õ–æ–≥—É—î–º–æ –Ω–æ–º–µ—Ä
                log_msg(
                    logFile, f"–ù–æ–≤–∏–π –Ω–æ–º–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ—ó CS: {local_CS_number}")
                # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–º–µ—Ä
                item_CRS_child.child(0).setText(local_CS_number)
            # –Ø–∫—â–æ –Ω–æ–≤–∞ CoordinateSystem —ñ–Ω—à–∞
            else:
                # –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –Ω–æ–º–µ—Ä
                item_CRS_child.removeRows(0, item_CRS_child.rowCount())
                # –∑–∞–º—ñ–Ω—é—î–º–æ Local –Ω–∞ –Ω–æ–≤—É
                item_CRS_child.setText(value)
        # –Ø–∫—â–æ —Å—Ç–∞—Ä–∞ CoordinateSystem —ñ–Ω—à–∞ (–Ω–µ SC63, –Ω–µ Local)
        else:
            # –Ø–∫—â–æ –Ω–æ–≤–∞ CoordinateSystem SC63
            if value.startswith("SC63,"):
                # –∑–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–æ–≤–∏–π —Ä–∞–π–æ–Ω
                sc63_region = value.split(",")[1].strip()
                # –ó–∞–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ä—É CoordinateSystem –Ω–∞ SC63
                item_CRS_child.setText("SC63")
                # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ä–∞–π–æ–Ω
                item_CRS_child.appendRow(
                    [QStandardItem(sc63_region), QStandardItem()])
            # –Ø–∫—â–æ –Ω–æ–≤–∞ CoordinateSystem Local
            elif value.startswith("Local"):
                # –ø–∞—Ä—Å–∏–º–æ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—ó –ª–æ–∫–∞–ª—å–Ω–æ—ó CS, —è–∫–∏–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –¥—É–∂–∫–∞—Ö
                local_CS_number = value[value.find("(") + 1:value.find(")")]
                # –ó–∞–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ä—É CoordinateSystem –Ω–∞ Local
                item_CRS_child.setText("Local")
                # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä
                item_CRS_child.appendRow(
                    [QStandardItem(local_CS_number), QStandardItem()])
            # –Ø–∫—â–æ –Ω–æ–≤–∞ CoordinateSystem —ñ–Ω—à–∞
            else:
                # –ó–∞–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ä—É CoordinateSystem –Ω–∞ –Ω–æ–≤—É
                item_CRS_child.setText(value)
        # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        log_msg(logFile, f"–û–Ω–æ–≤–ª–µ–Ω–∏–π CoordinateSystem: {value}")
        return

    def tree_HeightSystem_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î HeightSystem —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ HeightSystem —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_HeightSystem = self.find_element_index(path)
        if not index_HeightSystem.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç HeightSystem –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        item_HeightSystem = self.model.itemFromIndex(index_HeightSystem)
        # –∑–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç HeightSystem
        item_HeightSystem_child = item_HeightSystem.child(0)
        # –∑–∞–º—ñ–Ω—é—î–º–æ –π–æ–≥–æ –Ω–∞ –Ω–æ–≤–∏–π
        item_HeightSystem_child.setText(value)

    def tree_MeasurementUnit_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î MeasurementUnit —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ MeasurementUnit —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_MeasurementUnit = self.find_element_index(path)
        if not index_MeasurementUnit.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç MeasurementUnit –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        item_MeasurementUnit = self.model.itemFromIndex(index_MeasurementUnit)
        # –∑–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç MeasurementUnit
        item_MeasurementUnit_child = item_MeasurementUnit.child(0)
        # –∑–∞–º—ñ–Ω—é—î–º–æ –π–æ–≥–æ –Ω–∞ –Ω–æ–≤–∏–π
        item_MeasurementUnit_child.setText(value)

    def tree_CadastralZoneNumber_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î CadastralZoneNumber —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ CadastralZoneNumber —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_CadastralZoneNumber = self.find_element_index(path)
        if not index_CadastralZoneNumber.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç CadastralZoneNumber –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        item_CadastralZoneNumber = self.model.itemFromIndex(
            index_CadastralZoneNumber)
        item_CadastralZoneNumber.parent().child(
            item_CadastralZoneNumber.row(), 1).setText(value)

    def tree_CadastralQuarterNumber_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î CadastralQuarterNumber —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ CadastralQuarterNumber —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_CadastralQuarterNumber = self.find_element_index(path)
        if not index_CadastralQuarterNumber.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç CadastralQuarterNumber –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        item_CadastralQuarterNumber = self.model.itemFromIndex(
            index_CadastralQuarterNumber)
        item_CadastralQuarterNumber.parent().child(
            item_CadastralQuarterNumber.row(), 1).setText(value)

    def tree_ParcelID_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î ParcelID —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ ParcelID —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_ParcelID = self.find_element_index(path)
        if not index_ParcelID.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç ParcelID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        item_ParcelID = self.model.itemFromIndex(index_ParcelID)
        item_ParcelID.parent().child(item_ParcelID.row(), 1).setText(value)

    def tree_LocalAuthorityHead_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î LocalAuthorityHead —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ LocalAuthorityHead —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_LocalAuthorityHead = self.find_element_index(path)
        if not index_LocalAuthorityHead.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç LocalAuthorityHead –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        # –ü–∞—Ä—Å–∏–º–æ value –ü—Ä—ñ–∑–≤–∏—â–µ, –Ü–º'—è —Ç–∞ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –º–∞—é—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É.
        # –£ –Ü–º'—è —Ç–∞ –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –¥–æ–ø—É—Å–∫–∞—é—Ç—å—Å—è –∫—Ä–∞–ø–∫–∏, —è–∫—â–æ —î —ñ–Ω—ñ—Ü—ñ–∞–ª–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ü.–Ü.)
        # –Ø–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ, —Ç–æ –≤–∫–∞–∑—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º'—è
        # –ü—Ä—ñ–∑–≤–∏—â–µ, –Ü–º'—è —Ç–∞ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –º–∞—é—Ç—å –±—É—Ç–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–∞–º–∏
        # –ü—Ä—ñ–∑–≤–∏—â–µ, –Ü–º'—è —Ç–∞ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –º–∞—é—Ç—å –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏
        # –ü—Ä—ñ–∑–≤–∏—â–µ, –Ü–º'—è —Ç–∞ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –º–∞—é—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è
        if not self.validate_full_name(value):
            log_msg(logFile, f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–Ω—è '{value}'")
            return
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –ü—Ä—ñ–∑–≤–∏—â–µ, –Ü–º'—è —Ç–∞ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ
        if len(value.split(" ")) == 2:
            surname, name = value.split(" ")
            MiddleName = ""
        else:
            surname, name, MiddleName = value.split(" ")
        # –õ–æ–≥—É—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        log_msg(
            logFile, f"–ü—Ä—ñ–∑–≤–∏—â–µ: {surname}, –Ü–º'—è: {name}, –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ: {MiddleName}")

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ª–µ–º–µ–Ω—Ç LocalAuthorityHead
        item_LocalAuthorityHead = self.model.itemFromIndex(
            index_LocalAuthorityHead)
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç LocalAuthorityHead LastName
        item_LocalAuthorityHead_child_0 = item_LocalAuthorityHead.child(0)
        pathLastName = "UkrainianCadastralExchangeFile/InfoPart/CadastralZoneInfo/CadastralQuarters/CadastralQuarterInfo/RegionalContacts/LocalAuthorityHead/LastName"
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞ LastName
        index_LocalAuthorityHead_child_0 = self.find_element_index(
            pathLastName)
        # –ó–º—ñ–Ω—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ —É –∫–æ–ª–æ–Ω—Ü—ñ 1
        item_LocalAuthorityHead_child_0.parent().child(item_LocalAuthorityHead_child_0.row(),
                                                       # ‚úî 2025.01.30 15:11:08
                                                       1).setText(surname)
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç LocalAuthorityHead FirstName
        item_LocalAuthorityHead_child_1 = item_LocalAuthorityHead.child(1)
        pathFirstName = "UkrainianCadastralExchangeFile/InfoPart/CadastralZoneInfo/CadastralQuarters/CadastralQuarterInfo/RegionalContacts/LocalAuthorityHead/FirstName"
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞ FirstName
        index_LocalAuthorityHead_child_1 = self.find_element_index(
            pathFirstName)
        # –ó–º—ñ–Ω—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ —É –∫–æ–ª–æ–Ω—Ü—ñ 1
        item_LocalAuthorityHead_child_1.parent().child(
            item_LocalAuthorityHead_child_1.row(), 1).setText(name)
        # –Ø–∫—â–æ –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –≤–∫–∞–∑–∞–Ω–æ
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç LocalAuthorityHead MiddleName
        item_LocalAuthorityHead_child_2 = item_LocalAuthorityHead.child(2)
        pathMiddleName = "UkrainianCadastralExchangeFile/InfoPart/CadastralZoneInfo/CadastralQuarters/CadastralQuarterInfo/RegionalContacts/LocalAuthorityHead/MiddleName"
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞ MiddleName
        index_LocalAuthorityHead_child_2 = self.find_element_index(
            pathMiddleName)
        # –ó–º—ñ–Ω—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ —É –∫–æ–ª–æ–Ω—Ü—ñ 1
        item_LocalAuthorityHead_child_2.parent().child(
            item_LocalAuthorityHead_child_2.row(), 1).setText(MiddleName)

    def tree_DKZRHead_update(self, path, value):
        """ –û–Ω–æ–≤–ª—é—î DKZRHead —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ DKZRHead —É —Ç–∞–±–ª–∏—Ü—ñ
        """
        log_msg(logFile, f"{value}")
        index_DKZRHead = self.find_element_index(path)
        if not index_DKZRHead.isValid():
            log_msg(logFile, "–ï–ª–µ–º–µ–Ω—Ç DKZRHead –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–µ—Ä–µ–≤—ñ.")
            return
        # –ü–∞—Ä—Å–∏–º–æ value –ü—Ä—ñ–∑–≤–∏—â–µ, –Ü–º'—è —Ç–∞ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –º–∞—é—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É.
        # –£ –Ü–º'—è —Ç–∞ –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –¥–æ–ø—É—Å–∫–∞—é—Ç—å—Å—è –∫—Ä–∞–ø–∫–∏, —è–∫—â–æ —î —ñ–Ω—ñ—Ü—ñ–∞–ª–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ü.–Ü.)
        # –Ø–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ, —Ç–æ –≤–∫–∞–∑—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º'—è
        # –ü—Ä—ñ–∑–≤–∏—â–µ, –Ü–º'—è —Ç–∞ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –º–∞—é—Ç—å –±—É—Ç–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–∞–º–∏
        # –ü—Ä—ñ–∑–≤–∏—â–µ, –Ü–º'—è —Ç–∞ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –º–∞—é—Ç—å –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏
        # –ü—Ä—ñ–∑–≤–∏—â–µ, –Ü–º'—è —Ç–∞ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –º–∞—é—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è
        if not self.validate_full_name(value):
            log_msg(logFile, f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–Ω—è '{value}'")
            return
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –ü—Ä—ñ–∑–≤–∏—â–µ, –Ü–º'—è —Ç–∞ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ
        if len(value.split(" ")) == 2:
            surname, name = value.split(" ")
            MiddleName = ""
        else:
            surname, name, MiddleName = value.split(" ")
        # –õ–æ–≥—É—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        log_msg(
            logFile, f"–ü—Ä—ñ–∑–≤–∏—â–µ: {surname}, –Ü–º'—è: {name}, –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ: {MiddleName}")

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ª–µ–º–µ–Ω—Ç DKZRHead
        item_DKZRHead = self.model.itemFromIndex(index_DKZRHead)
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç DKZRHead LastName
        item_DKZRHead_child_0 = item_DKZRHead.child(0)
        pathLastName = "UkrainianCadastralExchangeFile/InfoPart/CadastralZoneInfo/CadastralQuarters/CadastralQuarterInfo/RegionalContacts/DKZRHead/LastName"
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞ LastName
        index_DKZRHead_child_0 = self.find_element_index(pathLastName)
        # –ó–º—ñ–Ω—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ —É –∫–æ–ª–æ–Ω—Ü—ñ 1
        item_DKZRHead_child_0.parent().child(item_DKZRHead_child_0.row(),
                                             # ‚úî 2025.01.30 15:11:08
                                             1).setText(surname)
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç DKZRHead FirstName
        item_DKZRHead_child_1 = item_DKZRHead.child(1)
        pathFirstName = "UkrainianCadastralExchangeFile/InfoPart/CadastralZoneInfo/CadastralQuarters/CadastralQuarterInfo/RegionalContacts/DKZRHead/FirstName"
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞ FirstName
        index_DKZRHead_child_1 = self.find_element_index(pathFirstName)
        # –ó–º—ñ–Ω—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ —É –∫–æ–ª–æ–Ω—Ü—ñ 1
        item_DKZRHead_child_1.parent().child(item_DKZRHead_child_1.row(), 1).setText(name)
        # –Ø–∫—â–æ –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –≤–∫–∞–∑–∞–Ω–æ
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç DKZRHead MiddleName
        item_DKZRHead_child_2 = item_DKZRHead.child(2)
        pathMiddleName = "UkrainianCadastralExchangeFile/InfoPart/CadastralZoneInfo/CadastralQuarters/CadastralQuarterInfo/RegionalContacts/DKZRHead/MiddleName"
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞ MiddleName
        index_DKZRHead_child_2 = self.find_element_index(pathMiddleName)
        # –ó–º—ñ–Ω—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ —É –∫–æ–ª–æ–Ω—Ü—ñ 1
        item_DKZRHead_child_2.parent().child(
            item_DKZRHead_child_2.row(), 1).setText(MiddleName)

    def extract_descriptions(self, element, full_path="", ns=None, is_root=False):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–∏—Ç—è–≥—É—î –æ–ø–∏—Å–∏ –∑ XSD –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, –≤–∫–ª—é—á–∞—é—á–∏ –≤–∫–ª–∞–¥–µ–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏.
        """
        name = element.get("name")
        ref = element.get("ref")

        if ref:
            # –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è ref, –∑–Ω–∞–π—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –∑–∞ ref
            ref_element = element.getroottree().xpath(
                f"//xsd:element[@name='{ref}']", namespaces=ns)  # pylint: disable=line-too-long
            if ref_element:
                self.extract_descriptions(
                    ref_element[0], full_path, ns, is_root=False)
            else:
                print(f"Reference '{ref}' not found in XSD.")
            return

        if name:
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö
            full_path = f"{full_path}/{name}".strip("/") if full_path else name

            # –í–∏—Ç—è–≥—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é
            documentation = element.xpath(
                './xsd:annotation/xsd:documentation', namespaces=ns)
            if documentation:
                self.xsd_descriptions[full_path] = documentation[0].text.strip(
                )
            
            # –í–∏—Ç—è–≥—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–∑–≤—É
            appinfo = element.xpath(
                './xsd:annotation/xsd:appinfo', namespaces=ns)
            if appinfo:
                self.xsd_appinfo[full_path] = appinfo[0].text.strip()

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            # log_msg(logFile, f"Extracted: {full_path} -> {self.xsd_appinfo.get(full_path, '')}")

        # –û–±—Ä–æ–±–∫–∞ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä —É xsd:complexType
        complex_type = element.xpath('./xsd:complexType', namespaces=ns)
        if complex_type:
            for child in complex_type[0].xpath('./xsd:sequence/xsd:element | ./xsd:choice/xsd:element | ./xsd:all/xsd:element', namespaces=ns):  # pylint: disable=line-too-long
                self.extract_descriptions(child, full_path, ns)

        # –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –º–∞—î –∞—Ç—Ä–∏–±—É—Ç type, –æ–±—Ä–æ–±–ª—è—î–º–æ —Ü–µ–π —Ç–∏–ø
        ref_type = element.get("type")
        if ref_type:
            if ref_type.startswith("xsd:"):
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω—ñ —Ç–∏–ø–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, xsd:string)
                pass
            else:
                # –û–±—Ä–æ–±–∫–∞ —Ç–∏–ø—É (complexType –∞–±–æ simpleType)
                ref_element = element.getroottree().xpath(
                    f"//xsd:complexType[@name='{ref_type}'] | //xsd:simpleType[@name='{ref_type}']", namespaces=ns)  # pylint: disable=line-too-long
                if ref_element:
                    print(
                        f"Processing type reference '{ref_type}' for element '{name}'")
                    for ref_child in ref_element[0].xpath('./xsd:sequence/xsd:element | ./xsd:choice/xsd:element | ./xsd:all/xsd:element', namespaces=ns):  # pylint: disable=line-too-long
                        self.extract_descriptions(ref_child, full_path, ns)

    def load_xsd_descriptions(self, path_to_xsd: str):
        """
        –ü–∞—Ä—Å—É—î XSD-—Ñ–∞–π–ª —ñ –≤–∏—Ç—è–≥—É—î –æ–ø–∏—Å–∏ –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
        –§–æ—Ä–º—É—î —Å–ª–æ–≤–Ω–∏–∫, –¥–µ –∫–ª—é—á ‚Äî –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî –æ–ø–∏—Å.
        """
        # log_msg(logFile, )

        self.xsd_appinfo = {}
        self.xsd_descriptions = {}
        self.xsd_schema = {}
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ XSD
            xsd_tree = etree.parse(
                path_to_xsd)  # pylint: disable=c-extension-no-member
            root = xsd_tree.getroot()
            # –ü—Ä–æ—Å—Ç—ñ—Ä —ñ–º–µ–Ω –¥–ª—è xsd
            ns = {'xsd': 'http://www.w3.org/2001/XMLSchema'}

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–µ–Ω–µ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç
            root_element = root.xpath(
                "//xsd:element[@name='UkrainianCadastralExchangeFile']", namespaces=ns)  # pylint: disable=line-too-long
            if root_element:
                self._parse_xsd_element(root_element[0], "", ns)
            else:
                log_msg(
                    logFile, "–ö–æ—Ä–µ–Ω–µ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç 'UkrainianCadastralExchangeFile' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")  # pylint: disable=line-too-long
        except Exception as e:
            log_msg(
                logFile, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É XSD: {e}")  # pylint: disable=broad-except

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–∏—Ö 10 –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é
        # log_msg(logFile, "–ü–µ—Ä—à—ñ 10 –∑–Ω–∞—á–µ–Ω—å —Å–ª–æ–≤–Ω–∏–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –Ω–∞–∑–≤:")
        # count = 0
        # for path, name in self.xsd_appinfo.items():
        #     if count >= 10:
        #         break
        #     log_msg(logFile, f"{path}: {name}")
        #     count += 1


        # log_dict(logFile, self.xsd_descriptions, msg="xsd_descriptions")
        return self.xsd_descriptions

    def _parse_xsd_element(self, element, parent_path, ns):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–∞—Ä—Å–∏—Ç—å XSD, –∑–±–∏—Ä–∞—é—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Ç–∏–ø–∏ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è."""
        tag_name = element.get('name')
        if not tag_name:
            ref = element.get('ref')
            if ref:
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ª–µ–º–µ–Ω—Ç –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥
                ref_element = element.getroottree().xpath(f"//xsd:element[@name='{ref}']", namespaces=ns)
                if ref_element:
                    # –ü–µ—Ä–µ–¥–∞—î–º–æ min/maxOccurs –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                    ref_element[0].set('minOccurs', element.get('minOccurs', '1'))
                    ref_element[0].set('maxOccurs', element.get('maxOccurs', '1'))
                    return self._parse_xsd_element(ref_element[0], parent_path, ns)
            return None

        full_path = f"{parent_path}/{tag_name}" if parent_path else tag_name

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –µ–ª–µ–º–µ–Ω—Ç
        element_info = {
            'name': tag_name,
            'minOccurs': element.get('minOccurs', '1'),
            'maxOccurs': element.get('maxOccurs', '1'),
            'children': []
        }

        # –û–ø–∏—Å–∏ —Ç–∞ –∫–æ—Ä–æ—Ç–∫—ñ –Ω–∞–∑–≤–∏
        annotation = element.find('xsd:annotation', ns)
        if annotation is not None:
            doc = annotation.find('xsd:documentation', ns)
            if doc is not None and doc.text:
                self.xsd_descriptions[full_path] = doc.text.strip()
            appinfo = annotation.find('xsd:appinfo', ns)
            if appinfo is not None and appinfo.text:
                self.xsd_appinfo[full_path] = appinfo.text.strip()

        # –û–±—Ä–æ–±–∫–∞ complexType
        complex_type = element.find('xsd:complexType', ns)
        type_name = element.get('type')

        if complex_type is None and type_name and not type_name.startswith('xsd:'):
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∏–ø –∑–∞ —ñ–º–µ–Ω–µ–º
            complex_type = element.getroottree().xpath(f"//xsd:complexType[@name='{type_name}']", namespaces=ns)
            complex_type = complex_type[0] if complex_type else None

        if complex_type is not None:
            # –û–±—Ä–æ–±–∫–∞ xsd:sequence, xsd:choice, xsd:all
            for group_tag in ['sequence', 'choice', 'all']:
                group = complex_type.find(f'xsd:{group_tag}', ns)
                if group is not None:
                    for child_element in group.findall('xsd:element', ns):
                        child_info = self._parse_xsd_element(child_element, full_path, ns)
                        if child_info:
                            element_info['children'].append(child_info)

        self.xsd_schema[full_path] = element_info
        return element_info

    def _add_element_to_tree(self, element, parent_item, full_path=""):
        """ –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–¥–∞—î XML-–µ–ª–µ–º–µ–Ω—Ç–∏ –¥–æ –º–æ–¥–µ–ª—ñ –¥–µ—Ä–µ–≤–∞, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—á–∏ –ø—ñ–¥–∫–∞–∑–∫–∏.
        """
        name = etree.QName(element).localname
        # log_msg(logFile, f"name = {name}")
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö
        if full_path:
            full_path = f"{full_path}/{name}"
        else:
            full_path = name

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É –∑ appinfo, —è–∫—â–æ –≤–æ–Ω–∞ —î, —ñ–Ω–∞–∫—à–µ ‚Äî —Ç–µ—Ö–Ω—ñ—á–Ω—É –Ω–∞–∑–≤—É
        display_name = self.xsd_appinfo.get(full_path, name)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –º–æ–¥–µ–ª—ñ
        name_item = QStandardItem(display_name)
        value_item = QStandardItem(
            element.text.strip() if element.text else "")

        name_item.setData(full_path, Qt.UserRole)
        value_item.setData(full_path, Qt.UserRole)

        self.tree_row += 1
        name_item.setData(self.tree_row, Qt.UserRole + 1)
        value_item.setData(self.tree_row, Qt.UserRole + 1)
        name_item.setData(0, Qt.UserRole + 2)
        value_item.setData(1, Qt.UserRole + 2)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É, —è–∫—â–æ –æ–ø–∏—Å –¥–æ—Å—Ç—É–ø–Ω–∏–π
        description = self.xsd_descriptions.get(full_path, "")
        if description:
            name_item.setToolTip(description)
            value_item.setToolTip(description)

        # –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞ (–Ω–∞–∑–≤–∏)
        name_item.setEditable(False)
        value_item.setEditable(False)

        # –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–æ –¥–µ—Ä–µ–≤–∞
        parent_item.appendRow([name_item, value_item])
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–¥–∞—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        
        # –î–æ–¥–∞—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ, –∞–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        if full_path in self.xsd_schema:
            schema = self.xsd_schema[full_path]
            existing_children_tags = {child.tag for child in element}

            for child_schema in schema.get('children', []):
                child_tag = child_schema['name']
                if child_tag not in existing_children_tags and child_schema.get('minOccurs', '1') != '0':
                    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –¥–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç
                    new_child = etree.SubElement(element, child_tag)
                    new_child.text = " " # –©–æ–± –Ω–µ –±—É–≤ —Å–∞–º–æ–∑–∞–∫—Ä–∏–≤–∞—é—á–∏–º

    def load_xml_to_tree_view(self, 
            xml_path: str = "",
            path_to_xsd: str = "",
            tree: etree._ElementTree = None):

        # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä—à–æ–ø–æ—á–∞—Ç–∫–æ–≤–æ —Å—Ç–≤–æ—Ä—é—î –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–µ –¥–µ—Ä–µ–≤–æ xml
        # –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ xml —Ñ–∞–π–ª–∞
        """
        Loads an XML file into a tree view and validates it against an XSD schema.
        Args:
            xml_path (str): The file path to the XML file to be loaded.
            path_to_xsd (str): The file path to the XSD schema for validation.
        Raises:
            Exception: If there is an error loading or parsing the XML file.
        """

        # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é _add_element_to_tree
        # log_calls(logFile, f"xml_path = {xml_path}\npath_to_xsd = {path_to_xsd}\ntree = {tree}")

        self.tree_row = 0

        try:
            self.xsd_descriptions = self.load_xsd_descriptions(path_to_xsd)

            if tree:
                self.xml_tree = tree
            else:
                self.xml_tree = etree.parse(xml_path)

            # –û—á–∏—â–∞—î–º–æ —ñ—Å–Ω—É—é—á—É –º–æ–¥–µ–ª—å –¥–µ—Ä–µ–≤–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ XML
            self.model.removeRows(0, self.model.rowCount())

            root = self.xml_tree.getroot()

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –¥–µ—Ä–µ–≤–∞
            def build_tree(xml_node, parent_qt_item, parent_path=""):
                # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—É–∑–æ–ª –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
                current_path = f"{parent_path}/{xml_node.tag}" if parent_path else xml_node.tag
                name_item, value_item = self._create_qt_items_for_element(xml_node, current_path)
                parent_qt_item.appendRow([name_item, value_item])

                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                for child_xml_node in xml_node:
                    build_tree(child_xml_node, name_item, current_path)

            # –ü–æ—á–∏–Ω–∞—î–º–æ –ø–æ–±—É–¥–æ–≤—É –∑ –∫–æ—Ä–µ–Ω—è
            build_tree(root, self.model.invisibleRootItem())
            
            # –ø—ñ—Å–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –¥–µ—Ä–µ–≤–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑–∫—Ä–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ 
            # –¥–µ—Ä–µ–≤–∞, —è–∫—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –±—É—Ç–∏ —Ä–æ–∑–∫—Ä–∏—Ç–∏–º–∏ expand_initial_elements

        except Exception as e:
            log_msg(logFile, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ XML: {e}")


    def _create_qt_items_for_element(self, element, full_path):
        """–°—Ç–≤–æ—Ä—é—î QStandardItem –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞ –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è."""
        display_name = self.xsd_appinfo.get(full_path, element.tag)
        description = self.xsd_descriptions.get(full_path, "")

        name_item = QStandardItem(display_name)
        name_item.setEditable(False)
        name_item.setData(full_path, Qt.UserRole)
        if description:
            name_item.setToolTip(description)

        # --- –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è StateActType ---
        is_state_act_type = full_path.endswith("/StateActInfo/StateActType")

        value_text = element.text.strip() if element.text and element.text.strip() else ""

        if is_state_act_type:
            # –ü–æ–∫–∞–∑—É—î–º–æ –æ–ø–∏—Å –∑–∞–º—ñ—Å—Ç—å –∫–æ–¥—É
            value_text = self.state_act_delegate.state_act_types.get(value_text, value_text)

        value_item = QStandardItem(value_text)

        # –î–æ–∑–≤–æ–ª—è—î–º–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–ª—è "–ª–∏—Å—Ç–∫—ñ–≤" (–µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –±–µ–∑ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –≤—É–∑–ª—ñ–≤)
        # –∞–±–æ –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —è–∫—ñ –º–∞—é—Ç—å –ø–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤—É–∑–æ–ª.
        # –ê–±–æ —è–∫—â–æ —Ü–µ –Ω–∞—à —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç StateActType
        is_leaf = len(element) == 0
        
        if is_state_act_type:
            value_item.setEditable(True)
        else:
            value_item.setEditable(is_leaf)

        value_item.setEditable(is_leaf)
        value_item.setData(full_path, Qt.UserRole)
        if description:
            value_item.setToolTip(description)        

        return name_item, value_item

    def save_xml_tree(self, xml_tree, xml_path):
        """
        Saves an lxml ElementTree object to a file.

        Args:
            xml_tree (etree._ElementTree): The lxml ElementTree object to save.
            xml_path (str): The file path where the XML should be saved.
        Raises:
            TypeError: If xml_tree is not an etree._ElementTree object.
            Exception: If there is an error saving the XML file.
        """

        # –ú–µ—Ç–æ–¥ save_xml_tree –∫–ª–∞—Å—É CustomTreeView –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î 
        # –∑–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è XML-–¥–µ—Ä–µ–≤–∞ –Ω–∞ –¥–∏—Å–∫.
        # –í—ñ–Ω –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç etree._ElementTree (xml_tree) 
        # —Ç–∞ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É (xml_path).
        # –í—ñ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î xml_tree.write() –¥–ª—è 
        # –∑–∞–ø–∏—Å—É –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª.
        # –ê–ª–µ —Ü–µ–π –º–µ—Ç–æ–¥ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ª–∏—à–µ –ø—Ä–∏ —è–≤–Ω—ñ–π –¥—ñ—ó 
        # –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "–ó–±–µ—Ä–µ–≥—Ç–∏" –∞–±–æ "–ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫".

        try:
            xml_tree.write(xml_path, encoding="utf-8", xml_declaration=True)
            print(f"XML file successfully saved to: {xml_path}")
        except OSError as e:
            raise Exception(f"Error saving XML file to {xml_path}: {e}") from e




    def find_element_index(self, path=None, element_name=None):
        """
            –ó–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞ —É –¥–µ—Ä–µ–≤—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —à–ª—è—Ö—É –∞–±–æ —ñ–º–µ–Ω—ñ.
        """
        # log_msg(logFile) # recursion
        if path:
            # –õ–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –∑–∞ —à–ª—è—Ö–æ–º
            current_index = QModelIndex()
            path_parts = path.split("/")  # –†–æ–∑–¥—ñ–ª—è—î–º–æ —à–ª—è—Ö –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
            for part in path_parts:
                found = False
                for row in range(self.model.rowCount(current_index)):
                    child_index = self.model.index(row, 0, current_index)
                    child_item = self.model.itemFromIndex(child_index)
                    if child_item and child_item.text() == part:
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–µ—Ä–µ–≤–∞
                        current_index = child_index
                        found = True
                        break
                if not found:
                    # –Ø–∫—â–æ –±—É–¥—å-—è–∫–∞ —á–∞—Å—Ç–∏–Ω–∞ —à–ª—è—Ö—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —ñ–Ω–¥–µ–∫—Å
                    return QModelIndex()
            return current_index
        elif element_name:
            # –õ–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –∑–∞ —ñ–º–µ–Ω–µ–º
            for row in range(self.model.rowCount()):
                # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —ñ–º–µ–Ω–∞ —É –ø–µ—Ä—à—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ
                item = self.model.item(row, 0)
                if item and item.text() == element_name:
                    return self.model.indexFromItem(item)

        return QModelIndex()
